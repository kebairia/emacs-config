#+TITLE: Emacs literate configuration
#+AUTHOR: Kebairia Zakaria
#+DATE: 03/2023
#+STARTUP: show2levels indent hidestars
#+PROPERTY: header-args :tangle (let ((org-use-tag-inheritance t)) (if (member "INACTIVE" (org-get-tags))  "no" "~/.config/emacs/init.el")))

* To sort :INACTIVE:
#+begin_src emacs-lisp 
(setq-default
 ad-redefinition-action 'accept         ; Silence warnings for redefinition
 custom-unlispify-menu-entries nil      ; Prefer kebab-case for titles
 custom-unlispify-tag-names nil         ; Prefer kebab-case for symbols
(put 'downcase-region 'disabled nil)    ; Enable downcase-region
(put 'upcase-region 'disabled nil)      ; Enable upcase-region
 native-comp-async-report-warnings-errors 'silent ; Skip compilation error buffers
 read-process-output-max (* 1024 1024)) ; Increase read size per process

#+end_src
* Core
** Header
#+begin_src emacs-lisp :epilogue (format-time-string ";; Last generated on %c")
;; -*- lexical-binding: t -*-
;; This file has been generated from init.org file. DO NOT EDIT.
;; Sources are available from https://github.com/kebairia/emacs-config

;; Copyright (C) 2023 Kebairia Zakaria

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; For a full copy of the GNU General Public License
;; see <https://www.gnu.org/licenses/>.

#+end_src
#+begin_src emacs-lisp
(defvar my/init-start-time (current-time) "Time when init.el was started")
(defvar my/section-start-time (current-time) "Time when section was started")
(defun my/report-time (section)
  (message "%-36s %.2fs"
           (concat section " " "section time: ")
           (float-time (time-subtract (current-time) my/section-start-time))))
(message "---------------------------------------------------------------")

#+end_src
** Early init :HOOK:OTHER:
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.config/emacs/lisp/early-init.el"
:END:
#+begin_src emacs-lisp
(setq
 site-run-file nil                         ; No site-wide run-time initializations. 
 inhibit-default-init t                    ; No site-wide default library
 gc-cons-threshold most-positive-fixnum    ; Very large threshold for garbage
                                           ; collector during init
 package-enable-at-startup nil)            ; We'll use straight.el

(setq native-comp-eln-load-path
      (list (expand-file-name "eln-cache" user-emacs-directory)))

;; Reset garbage collector limit after init process has ended (8Mo)
(add-hook 'after-init-hook
          #'(lambda () (setq gc-cons-threshold (* 8 1024 1024))))

#+end_src
** Packages management :PERSONAL:
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(setq straight-check-for-modifications nil)
#+end_src
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Library and theme load paths with a special case for mu4e (you may need to adapt this path).

#+begin_src emacs-lisp
(add-to-list 'load-path
             (expand-file-name "lisp" user-emacs-directory))
(add-to-list 'custom-theme-load-path
             (expand-file-name "theme" user-emacs-directory))
#+end_src

** Packages installation

Packages used in this specific configuration. You may want to adapt this list. The first time this sequence will be executed, *it will take a long time*. Then, at next restart, it should be very fast (less than 1 second because it won't install anything basically).
#+begin_src emacs-lisp
(setq package-list
      '(cape                ; Completion At Point Extensions
        orderless           ; Completion style for matching regexps in any order
        vertico             ; VERTical Interactive COmpletion
        marginalia          ; Enrich existing commands with completion annotations
        aggressive-indent   ; Keeps your code always indented 
        evil                ; A VI layer for Emacs
        evil-collection
        evil-org            ; Evil extensions for Org-mode
        org-roam            ; Roam implementation for Emacs/org
        org-roam-ui         ; A graph generator for org-roam notes
        org-appear          ; Make invisible parts of Org elements appear visible.
        org-cliplink        ; Insert org-mode links from clipboard
        org-pdftools        ; A custom org link type for pdf-tools
        org-noter-pdftools  ; Support for org-noter 
        org-noter           ; Emacs document annotator, using Org-mode
        f                   ; Modern API for working with files and directories
        corfu               ; Completion Overlay Region FUnction
        deft                ; Quickly browse, filter, and edit plain text notes
        citar               ; Citation-related commands for org, latex, markdown
        citeproc            ; A CSL 1.0.2 Citation Processor
        flyspell-correct-popup ; Correcting words with flyspell via popup interface
        flyspell-popup      ; Correcting words with Flyspell in popup menus
        helpful             ; A better help buffer
        htmlize             ; Convert buffer text and decorations to HTML
        mini-frame          ; Show minibuffer in child frame on read-from-minibuffer
        imenu-list          ; Show imenu entries in a separate buffer
        eglot               ; A client for Language Server Protocol servers
        magit               ; A Git porcelain inside Emacs.
        markdown-mode       ; Major mode for Markdown-formatted text
        use-package         ; A configuration macro for simplifying your .emacs
        vc-backup           ; VC backend for versioned backups
        yaml-mode           ; YAML mode
        hcl-mode            ; HCL mode
        jinja2-mode         ; Jinja2 mode
        ;; org-auto-tangle     ; Tangle org file when it is saved
        which-key))         ; Display available keybindings in popup

;; Install packages that are not yet installed
(dolist (package package-list)
  (straight-use-package package))

;; Special case for pdf-tools that has recently (2022) changed maintainer
(straight-use-package
 '(pdf-tools :type git :host github :repo "vedang/pdf-tools"))

;; ;; Denote not yet on ELPA (2022-06-19)
;; (straight-use-package
;;  '(denote :type git :host github :repo "protesilaos/denote"))
#+end_src

*** Rougier packages
#+begin_src emacs-lisp

;; Display org properties in the agenda buffer (modified version)
;; (straight-use-package
;;  '(org-agenda-property :type git :host github :repo "Malabarba/org-agenda-property"
;;                        :fork (:host github :repo "rougier/org-agenda-property")))

;; NANO splash
;; (straight-use-package
;;  '(nano-splash :type git :host github :repo "rougier/nano-splash"))

;; NANO theme
(straight-use-package
 '(nano-theme :type git :host github :repo "rougier/nano-theme"))

;; NANO modeline
(straight-use-package
 '(nano-modeline :type git :host github :repo "rougier/nano-modeline"))

;; NANO agenda
(straight-use-package
 '(nano-agenda :type git :host github :repo "rougier/nano-agenda"))

;; NANO agenda
(straight-use-package
 '(minibuffer-header :type git :host github :repo "rougier/minibuffer-header"))

;; SVG tags, progress bars & icons
(straight-use-package
 '(svg-lib :type git :host github :repo "rougier/svg-lib"))

;; Replace keywords with SVG tags
(straight-use-package
 '(svg-tag-mode :type git :host github :repo "rougier/svg-tag-mode"))

;; ;; Relative date formatting
;; (straight-use-package
;;  '(relative-date :type git :host github :repo "rougier/relative-date"))

;; org imenu
;; (straight-use-package
;;  '(org-imenu :type git :host github :repo "rougier/org-imenu"))

;; Bilbliography manager in org mode
(straight-use-package
  '(org-bib :type git :host github :branch "org-imenu" :repo "rougier/org-bib-mode"))
#+end_src

** Startup
Emacs does a lot of things at startup and here, we disable pretty much everything.
#+begin_src emacs-lisp

(setq-default
 inhibit-startup-screen t               ; Disable start-up screen
 inhibit-startup-message t              ; Disable startup message
 inhibit-startup-echo-area-message t    ; Disable initial echo message
 initial-scratch-message ""             ; Empty the initial *scratch* buffer
 initial-buffer-choice t)               ; Open *scratch* buffer at init

#+end_src

** Encoding

We tell emacs to use UTF-8 encoding as much as possible.

#+begin_src emacs-lisp

(set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
(prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
(set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
(set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
(set-language-environment "English")    ; Set up multilingual environment

#+end_src

** Recovery

If Emacs or the computer crashes, you can recover the files you were editing at the time of the crash from their auto-save files. To do this, start Emacs again and type the command ~M-x recover-session~. Here, we parameterize how files are saved in the background.

#+begin_src emacs-lisp

(setq auto-save-list-file-prefix ; Prefix for generating auto-save-list-file-name
      (expand-file-name ".auto-save-list/.saves-" user-emacs-directory)
      auto-save-default t        ; Auto-save every buffer that visits a file
      auto-save-timeout 20       ; Number of seconds between auto-save
      auto-save-interval 200)    ; Number of keystrokes between auto-saves

#+end_src

** Backups

Emacs carefully copies the old contents to another file, called the “backup” file, before actually saving. Emacs makes a backup for a file only the first time the file is saved from a buffer. No matter how many times you subsequently save the file, its backup remains unchanged. However, if you kill the buffer and then visit the file again, a new backup file will be made. Here, we activate backup and parameterize the number of backups to keep.

#+begin_src emacs-lisp


(setq backup-directory-alist       ; File name patterns and backup directory names.
      `(("." . ,(expand-file-name "backups" user-emacs-directory)))
      make-backup-files t          ; Backup of a file the first time it is saved.
      vc-make-backup-files t       ; No backup of files under version contr
      backup-by-copying t          ; Don't clobber symlinks
      version-control t            ; Version numbers for backup files
      delete-old-versions t        ; Delete excess backup files silently
      kept-old-versions 6          ; Number of old versions to keep
      kept-new-versions 9          ; Number of new versions to keep
      delete-by-moving-to-trash t) ; Delete files to trash

;; Back
(require 'vc-backup)

#+end_src

** Bookmarks

#+begin_src emacs-lisp

(setq bookmark-default-file (expand-file-name "bookmark" user-emacs-directory))

#+end_src

** Recent files

50 Recents files with some exclusion (regex patterns).

#+begin_src emacs-lisp

(require 'recentf)

(setq recentf-max-menu-items 10
      recentf-max-saved-items 100)

(let (message-log-max)
  (recentf-mode 1))

#+end_src

** History :HOOK:

Remove text properties for kill ring entries (see https://emacs.stackexchange.com/questions/4187). This saves a lot of time when loading it.

 #+begin_src emacs-lisp 

(defun unpropertize-kill-ring ()
  (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

(add-hook 'kill-emacs-hook 'unpropertize-kill-ring)

#+end_src

We save every possible history we can think of.

#+begin_src emacs-lisp 

(require 'savehist)

(setq kill-ring-max 50
      history-length 50)

(setq savehist-additional-variables
      '(kill-ring
        command-history
        set-variable-value-history
        custom-variable-history   
        query-replace-history     
        read-expression-history   
        minibuffer-history        
        read-char-history         
        face-name-history         
        bookmark-history
        file-name-history))

 (put 'minibuffer-history         'history-length 50)
 (put 'file-name-history          'history-length 50)
 (put 'set-variable-value-history 'history-length 25)
 (put 'custom-variable-history    'history-length 25)
 (put 'query-replace-history      'history-length 25)
 (put 'read-expression-history    'history-length 25)
 (put 'read-char-history          'history-length 25)
 (put 'face-name-history          'history-length 25)
 (put 'bookmark-history           'history-length 25)

#+end_src

No duplicates in history
  
#+begin_src emacs-lisp

(setq history-delete-duplicates t)

#+end_src
  
Start history mode.

#+begin_src emacs-lisp

(let (message-log-max)
  (savehist-mode))

#+end_src
** Cursor

Record cursor position from one session ot the other

#+begin_src emacs-lisp

(setq save-place-file (expand-file-name "saveplace" user-emacs-directory)
      save-place-forget-unreadable-files t)

(save-place-mode 1)

#+end_src

** Customization

Since init.el will be generated from this file, we save customization in a dedicated file.

#+begin_src emacs-lisp

(setq custom-file (concat user-emacs-directory "custom.el"))

(when (file-exists-p custom-file)
  (load custom-file nil t))

#+end_src

** Server

Server start.

#+begin_src emacs-lisp

(require 'server)

(unless (server-running-p)
  (server-start))

#+end_src

** Keybinding :BINDING:

Splitting windows and moving to the new window
#+begin_src emacs-lisp
(defun zk/split-go-right ()
  "Split the current window horizontally and move to the new window on the right."
  (interactive)
  (split-window-horizontally)
  (windmove-right))

(defun zk/split-go-down ()
  "Split the current window vertically and move to the new window below."
  (interactive)
  (split-window-vertically)
  (windmove-down))
#+end_src

Keybindings for opening special files
#+begin_src emacs-lisp
(bind-key "C-c C" (lambda () (interactive) (find-file "~/.config/emacs/init.org")))
(bind-key "C-c b" (lambda () (interactive) (find-file "~/org/books.org")))
#+end_src

Keybindings for switching buffers
#+begin_src emacs-lisp
(bind-key "M-n" 'switch-to-next-buffer)
(bind-key "M-p" 'switch-to-prev-buffer)
#+end_src

Keybindings for moving between windows
#+begin_src emacs-lisp
(bind-key "C-c k" #'windmove-up)
(bind-key "C-c j" #'windmove-down)
(bind-key "C-c l" #'windmove-right)
(bind-key "C-c h" #'windmove-left)

#+end_src

Keybindings for splitting windows and moving to the new window
#+begin_src emacs-lisp
(bind-key "C-c i" #'zk/split-go-right)
(bind-key "C-c m" #'zk/split-go-down)
#+end_src

Keybinding for Org mode capture
#+begin_src emacs-lisp
(bind-key "C-c c" #'org-capture)

#+end_src

Keybinding for Imenu
#+begin_src emacs-lisp
(bind-key "C-c t" #'imenu-list)
(bind-key "C-c T" #'imenu)
#+end_src

#+begin_src emacs-lisp

(my/report-time "Core")

#+end_src

* Interface

#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src

** Frame :BINDING:

A [[help:make-frame][make-frame]] rewrote that creates the frame and switch to the ~*scratch*~ buffer.

#+name: my/new-frame
#+begin_src emacs-lisp

(defun my/make-frame ()
  "Create a new frame and switch to *scratch* buffer."

  (interactive)
  (select-frame (make-frame))
  (switch-to-buffer "*scratch*"))

#+end_src

A function that close the current frame and kill emacs if it was the last frame.

#+name: my/kill-emacs
#+begin_src emacs-lisp

(defun my/kill-emacs ()
  "Delete frame or kill Emacs if there is only one frame."
  
  (interactive)
  (condition-case nil
      (delete-frame)
    (error (save-buffers-kill-terminal))))

#+end_src

Default frame geometry (large margin: 24 pixels).

#+begin_src emacs-lisp

(require 'frame)

;; Default frame settings
(setq default-frame-alist '((min-height . 1)  '(height . 45)
                            (min-width  . 1)  '(width  . 81)
                            (vertical-scroll-bars . nil)
                            (internal-border-width . 24)
                            (left-fringe . 0)
                            (right-fringe . 0)
                            (tool-bar-lines . 0)
                            (menu-bar-lines . 1)))

;; Default frame settings
(setq initial-frame-alist default-frame-alist)


#+end_src

Frame related binding (self explanatory).

#+begin_src emacs-lisp

;; (bind-key "M-n"        #'my/make-frame)
(bind-key "C-x C-c"    #'my/kill-emacs)
(bind-key "M-`"        #'other-frame)
(bind-key "C-z"        nil)
(bind-key "<M-return>" #'toggle-frame-maximized)

#+end_src

For frame maximization, we have to make a specific case for [[help:org-mode][org-mode]].

#+begin_src emacs-lisp

(with-eval-after-load 'org
  (bind-key "<M-return>" #'toggle-frame-maximized 'org-mode-map))

#+end_src

** Window :BINDING:MODE:

Margin and divider mode.

#+begin_src emacs-lisp

(setq-default window-divider-default-right-width 24
              window-divider-default-places 'right-only
              left-margin-width 0
              right-margin-width 0
              window-combination-resize nil) ; Do not resize windows proportionally

(window-divider-mode 1)

#+end_src

Toggle the dedicated flag on the current window

#+name: my/toggle-window-dedicated
#+begin_src emacs-lisp

;; Make a window dedicated
(defun my/toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
     (set-window-dedicated-p window (not (window-dedicated-p window))))
       "Window '%s' is dedicated"
     "Window '%s' is normal")
   (current-buffer))
  (force-window-update))

(bind-key "C-c d" #'my/toggle-window-dedicated)

#+end_src

** Buffer :BINDING:

Size of temporary buffers

#+begin_src emacs-lisp

(temp-buffer-resize-mode)
(setq temp-buffer-max-height 8)

#+end_src

Unique buffer names

#+begin_src emacs-lisp

(require 'uniquify)

(setq uniquify-buffer-name-style 'reverse
      uniquify-separator " • "
      uniquify-after-kill-buffer-p t
      uniquify-ignore-buffers-re "^\\*")

#+end_src

No question after killing a buffer (kill-buffer asks you which buffer to switch to)

#+begin_src emacs-lisp

(bind-key "C-x k" #'kill-current-buffer)

#+end_src
*** Ibuffer configuration
#+begin_src emacs-lisp
;; Use Ibuffer for Buffer List
(bind-key "C-x C-b" #'ibuffer)
;; create a function that define a group
(setq ibuffer-saved-filter-groups
      '(("default"
         ("Emacs"  (or
                    (name . "^\\*Messages\\*$")
                    (name . "^\\*scratch\\*$")
                    ))
         ("Agenda"  (or
                     (name . "inbox.org")
                     (name . "next.org")
                     (name . "someday.org")
                     (name . "emails.org")
                     (name . "archive.org")
                     (name . "habits.org")
                     (name . "projects.org")
                     (name . "weekly_reviews.org")
                     ))

         ("Org"  (name . "^.*org$"))
         ("PDF"  (name . "^.*pdf"))
         ("Python"  (name . "^.*py$"))
         ("Lisp"  (name . "^.*el"))
         ("Web"  (or
                  (name . "^.*html$")
                  (name . "^.*css")
                  (name . "^.*php")
                  ))
         ("Dired"  (mode . dired-mode))
         ))
      )

(add-hook 'ibuffer-mode-hook
          '(lambda ()
             (ibuffer-auto-mode 1)
             (ibuffer-switch-to-saved-filter-groups "default"))) ;; use the group default
#+end_src
** File

Follow symlinks without prompt

#+begin_src emacs-lisp

(setq vc-follow-symlinks t)

#+end_src
** Dialogs :OS:

Emacs can use a large number of dialogs and popups. Here we get rid of them.

#+begin_src emacs-lisp

(setq-default show-help-function nil    ; No help text
              use-file-dialog nil       ; No file dialog
              use-dialog-box nil        ; No dialog box
              pop-up-windows nil)       ; No popup windows

(tooltip-mode -1)                       ; No tooltips
(scroll-bar-mode -1)                    ; No scroll bars
(tool-bar-mode -1)                      ; No toolbar

#+end_src


Specific case for OSX since menubar is desktop-wide (see [[https://emacs.stackexchange.com/questions/28121/osx-switching-to-virtual-desktop-doesnt-focus-emacs][emacs.stackexchange.com/questions/28121]]) and [[https://bitbucket.org/mituharu/emacs-mac/src/892fa7b2501a403b4f0aea8152df9d60d63f391a/doc/emacs/macport.texi?at=master#macport.texi-529][emacs-mac documentation]].

#+begin_quote
  Unlike the original Emacs, enabling or disabling Menu Bar mode (@pxref{Menu Bars}) does not affect the appearance of the mexnu bar on the Mac port because it does not make sense on OS X having the global menu bar. Instead, the value of the @code{menu-bar-lines} frame parameter affects the system-wide full screen behavior of the frame. In most cases, disabling the menu bar of a particular frame by default means that it is a utility frame used for a subsidiary purpose together with other frames, rather than an ordinary frame on its own. Examples include the speedbar (@pxref{Speedbar}) and Ediff Control Panel (@pxref{Top, Ediff, Ediff, ediff, The Ediff Manual}). Using this heuristics, the Mac port regards a frame having a menu bar as an ordinary frame that is eligible for full screen. Conversely, a frame without a menu bar is considered as a utility frame and it can coexist with a full screen ordinary frame and other utility frames in a same desktop (or Space) for full screen. Note that a utility frame doesn't have the full screen button on the title bar. If you don't see the full screen button while it is supposed to be there, then check the menu bar setting.
#+end_quote

#+begin_src emacs-lisp

(menu-bar-mode nil)

#+end_src

** Keyboard :MODE:

The mode displays the key bindings following your currently entered incomplete command (a ;; prefix) in a popup.

#+begin_src emacs-lisp

(require 'which-key)

(which-key-mode)


#+end_src

** Cursor :MODE:

We set the appearance of the cursor: horizontal line, 2 pixels thick, no blinking

#+begin_src emacs-lisp

(setq-default cursor-in-non-selected-windows nil ; Hide the cursor in inactive windows
              cursor-type '(hbar . 2)            ; Underline-shaped cursor
              cursor-intangible-mode t           ; Enforce cursor intangibility
              x-stretch-cursor nil)              ; Don't stretch cursor to the glyph width

(blink-cursor-mode 0)                            ; Still cursor

#+end_src

** Text :BINDING:

Pretty self-explanatory

#+begin_src emacs-lisp

(setq-default use-short-answers t                     ; Replace yes/no prompts with y/n
              confirm-nonexistent-file-or-buffer nil) ; Ok to visit non existent files

#+end_src

Replace region when inserting text
               
#+begin_src emacs-lisp

(delete-selection-mode 1)

#+end_src

A smarter fill/unfill command

#+begin_src emacs-lisp

(defun my/fill-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  
  (interactive)
  (let ((fill-column
         (if (eq last-command #'my/fill-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(bind-key "M-q"  #'my/fill-unfill)
;; (bind-key [remap fill-paragraph]  #'my/fill-unfill)

#+end_src

** Sound

Disable the bell (auditory or visual).

#+begin_src emacs-lisp

(setq-default visible-bell nil             ; No visual bell      
              ring-bell-function 'ignore)  ; No bell

#+end_src

** Mouse :MODE:

Mouse behavior can be finely controlled using the [[help:mouse-avoidance-mode][mouse-avoidance-mode]].

#+begin_src emacs-lisp

(setq-default mouse-yank-at-point t) ; Yank at point rather than pointer
(mouse-avoidance-mode 'exile)        ; Avoid collision of mouse with point

#+end_src

Mouse active in tty mode.

#+begin_src emacs-lisp

(unless (display-graphic-p)
  (xterm-mouse-mode 1)
  (global-set-key (kbd "<mouse-4>") #'scroll-down-line)
  (global-set-key (kbd "<mouse-5>") #'scroll-up-line))

#+end_src

** Scroll

Smoother scrolling.

#+begin_src emacs-lisp

(setq-default scroll-conservatively 101       ; Avoid recentering when scrolling far
              scroll-margin 2                 ; Add a margin when scrolling vertically
              recenter-positions '(5 bottom)) ; Set re-centering positions

#+end_src

** Clipboard :OS:

Allows system and Emacs clipboard to communicate smoothly (both ways)

#+begin_src emacs-lisp

(setq-default select-enable-clipboard t) ; Merge system's and Emacs' clipboard

#+end_src

Make sure clipboard works properly in tty mode on OSX.

#+begin_src emacs-lisp

(defun my/paste-from-osx ()
  (shell-command-to-string "pbpaste"))

(defun my/copy-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))

(when (and (not (display-graphic-p))
           (eq system-type 'darwin))
  (setq interprogram-cut-function   #'my/copy-to-osx
        interprogram-paste-function #'my/paste-from-osx))

#+end_src

** Help :BINDING:

[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
It is a bit slow to load so we do need load it explicitely.

#+begin_src emacs-lisp

(setq help-window-select t)             ; Focus new help windows when opened

(bind-key "C-h f"   #'helpful-callable) ; Look up callable
(bind-key "C-h v"   #'helpful-variable) ; Look up variable
(bind-key "C-h k"   #'helpful-key)      ; Look up key 
(bind-key "C-c C-d" #'helpful-at-point) ; Look up the current symbol at point
(bind-key "C-h F"   #'helpful-function) ; Look up *F*unctions (excludes macros).
(bind-key "C-h C"   #'helpful-command)  ; Look up *C*ommands.

(require 'nano-theme)
;; (setq nano-fonts-use t) ; Use theme font stack
(nano-modeline-mode)    ; Use nano-modeline
#+end_src

** Benchmark

#+begin_src emacs-lisp

(my/report-time "Interface")

#+end_src

* Visual


#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src

** Colors :MODE:TIMER:

A consistent theme for GNU Emacs. The light theme is based on Material colors and the dark theme is based on Nord colors. The theme is based on a set of six faces (only).

#+begin_src lisp

(require 'nano-theme)
(setq nano-fonts-use t) ; Use theme font stack
(nano-dark)             ; Use theme dark version
(nano-mode)             ; Recommended settings


(defun my/set-face (face style)
  "Reset FACE and make it inherit STYLE."
  (set-face-attribute face nil
                      :foreground 'unspecified :background 'unspecified
                      :family     'unspecified :slant      'unspecified
                      :weight     'unspecified :height     'unspecified
                      :underline  'unspecified :overline   'unspecified
                      :box        'unspecified :inherit    style))
(my/set-face 'italic 'nano-faded)


#+end_src
Load nano-dark theme after startup, fixing the dark-theme issue with emacsclient
#+begin_src emacs-lisp
(defun load-nano-dark-theme-after-startup ()
  "A custom function to be executed after Emacs startup."
  (nano-dark))

(add-hook 'after-init-hook 'load-nano-dark-theme-after-startup)
#+end_src

We still want the transient nano splash screen

#+begin_src emacs-lisp

;; (require 'nano-splash)

#+end_src

** Fonts

This is the font stack we install:

- Default font:  Roboto Mono 14pt Light       [[https://fonts.google.com/specimen/Roboto+Mono][]]
- /Italic font/:   Victor Mono 14pt Semilight   [[https://github.com/rubjo/victor-mono][]]
- *Bold font*:     Roboto Mono 14pt Regular     [[https://fonts.google.com/specimen/Roboto+Mono][]] 
- Unicode font:  Inconsolata 16pt Light       [[https://github.com/googlefonts/Inconsolata][]] 
- Icon font:     Roboto Mono Nerd 12pt Light  [[https://www.nerdfonts.com/][]]
  
Text excerpt using a /gorgeous/ and true italic font (Victor Mono),
chosen to really *stand out* from the default font (Roboto Mono).
┌───────────────────────────────────────────────┐ 
│  The quick brown fox jumps over the lazy dog │
│  /The quick brown fox jumps over the lazy dog/ ┼─ Victor Mono Italic
│  *The quick brown fox jumps over the lazy dog* ├─ Inconsolata
└─┼───────────────────────────┼─────────────────┘
 Roboto Mono Nerd            Roboto Mono

Note that the Victor Mono needs to be hacked such as to have the same line height as Roboto Mono. To do that, you can use the [[https://github.com/source-foundry/font-line][font-line]] utility (github.com/source-foundry/font-line): copy all the italic faces from the Victor Mono ttf file into a directoy and type: =font-line percent 10 *.ttf=. This will create a new set of files that you can use to replace the Victor Mono italic faces on your system.

 
#+begin_src lisp

(set-face-attribute 'default nil
                    :family "FantasqueSansMono"
                    :weight 'light
                    :height 140)

(set-face-attribute 'bold nil
                    :family "FantasqueSansMono"
                    :weight 'regular)

(set-face-attribute 'italic nil
                    :family "FantasqueSansMono"
                    :weight 'semilight
                    :slant 'italic)

(set-fontset-font t 'unicode
                    (font-spec :name "FantasqueSansMono"
                               :size 16) nil)

(set-fontset-font t '(#xe000 . #xffdd)
                     (font-spec :name "FantasqueSansMono"
                                :size 12) nil)

#+end_src

** Typography

#+begin_src emacs-lisp

(setq-default fill-column 80                          ; Default line width 
              sentence-end-double-space nil           ; Use a single space after dots
              bidi-paragraph-direction 'left-to-right ; Faster
              truncate-string-ellipsis "…")           ; Nicer ellipsis

#+end_src

Changing the symbol for truncation (…) and wrap (↩).

#+begin_src emacs-lisp

(require 'nano-theme)

;; Nicer glyphs for continuation and wrap 
(set-display-table-slot standard-display-table
                        'truncation (make-glyph-code ?… 'nano-faded))

(defface wrap-symbol-face
  '((t (:family "Fira Code"
        :inherit nano-faded)))
  "Specific face for wrap symbol")

(set-display-table-slot standard-display-table
                        'wrap (make-glyph-code ?↩ 'wrap-symbol-face))

#+end_src

Fix a bug on OSX in term mode & zsh (spurious "%" after each command)

#+begin_src emacs-lisp

(when (eq system-type 'darwin)
  (add-hook 'term-mode-hook
            (lambda ()
              (setq buffer-display-table (make-display-table)))))

#+end_src

Make sure underline is positionned at the very bottom.

#+begin_src emacs-lisp

(setq x-underline-at-descent-line nil
      x-use-underline-position-properties t
      underline-minimum-offset 10)

#+end_src
** Benchmark

#+begin_src emacs-lisp

(my/report-time "Visual")

#+end_src
* Editing

#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src

** Navigation mode (Evil)

Put this before loading evil to work
#+begin_src emacs-lisp
(setq evil-want-C-i-jump nil)
(setq evil-want-abbrev-expand-on-insert-exit nil)
(setq evil-want-keybinding nil)
#+end_src
Then we start evil and evil-collection modes
#+begin_src emacs-lisp
(evil-mode 1)
(when (require 'evil-collection nil t)
(evil-collection-init))
#+end_src

** Abbreviations mode
Define my abbreviations
#+begin_src emacs-lisp
;; (clear-abbrev-table 'global-abbrev-table)
(define-abbrev-table 'global-abbrev-table
  '(
    ;; Words and Sentences
    ("afaik" "as far as I know")
    ("emacs" "Emacs")
    ("realy" "really")
    ("mnm" "Millennium")
    ("thru" "through")
    ("i" "I")
    ("envr" "environment")
    ("thanx" "thanks")
    ("btw" "by the way")
    ;; Emojies 
    ("hrt" "❤")
    (":)" "😀")
    ;; Arrows 
    ("ra" "→")
    ("la" "←")
    ("lra" "⟶")
    ("lla" "⟵")
    ))
#+end_src
Enable abbrev mode
#+begin_src emacs-lisp
(abbrev-mode)
#+end_src

** Indentation
#+begin_src emacs-lisp
(global-aggressive-indent-mode 1)
#+end_src
** Default mode :HOOK:MODE:

Default & initial mode is text.

#+begin_src emacs-lisp

(setq-default initial-major-mode 'text-mode   ; Initial mode is text
              default-major-mode 'text-mode)  ; Default mode is text

#+end_src

Visual line mode for prog and text modes

#+begin_src emacs-lisp

(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'prog-mode-hook 'visual-line-mode)

#+end_src

** Tabulations

No tabulation, ever.

#+begin_src emacs-lisp

(setq-default indent-tabs-mode nil        ; Stop using tabs to indent
              tab-always-indent 'complete ; Indent first then try completions
              tab-width 2)                ; Smaller width for tab characters

;; Let Emacs guess Python indent silently
(setq python-indent-guess-indent-offset t
      python-indent-guess-indent-offset-verbose nil)

#+end_src

** Parenthesis :MODE:

Paren mode for highlighting matcing paranthesis

#+begin_src emacs-lisp

(require 'paren)
;; (setq show-paren-style 'expression)
(setq show-paren-style 'parenthesis)
(setq show-paren-when-point-in-periphery t)
(setq show-paren-when-point-inside-paren nil)
(show-paren-mode)

#+end_src

Insert matching delimiters
#+begin_src emacs-lisp
(electric-pair-mode)
#+end_src

** Imenu list

Imenu setup

#+begin_src emacs-lisp

(require 'imenu-list)

(setq-default imenu-list-position 'left
              imenu-max-item-length 1000)

#+end_src
** Highlighting :MODE:

Highlighting of the current line (native mode)

#+begin_src emacs-lisp

(require 'hl-line)

(global-hl-line-mode)

#+end_src

** PDF Tools

For retina display (OSX)

#+begin_src emacs-lisp
;; (require 'pdf-tools)

(add-hook 'doc-view-mode-hook 'pdf-tools-install)

(setq-default pdf-view-use-scaling t
              pdf-view-use-imagemagick nil)

#+end_src

** Benchmark

#+begin_src emacs-lisp

(my/report-time "Editing")

#+end_src

* Completion

#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src

** Corfu :MODE:

[[https://github.com/minad/corfu][Corfu]] enhances completion at point with a small completion popup.

#+begin_src emacs-lisp

(require 'corfu)

(setq corfu-cycle t                ; Enable cycling for `corfu-next/previous'
      corfu-auto t                 ; Enable auto completion
      corfu-auto-delay 0        ; Delay before auto-completion shows up
      corfu-auto-prefix 2
      completion-styles '(basic)
      corfu-separator ?\s          ; Orderless field separator
      corfu-quit-at-boundary nil   ; Never quit at completion boundary
      corfu-quit-no-match t        ; Quit when no match
      corfu-preview-current t    ; Disable current candidate preview
      corfu-preselect-first nil    ; Disable candidate preselection
      corfu-on-exact-match nil     ; Configure handling of exact matches
      corfu-echo-documentation 0.25 ; Disable documentation in the echo area
      corfu-scroll-margin 5)       ; Use scroll margin
#+end_src
Only use corfu when I'm programming
#+begin_src emacs-lisp

(add-hook 'prog-mode-hook 'corfu-mode)

#+end_src

A few more useful configurations...

#+begin_src emacs-lisp

;; TAB cycle if there are only few candidates
(setq completion-cycle-threshold 3)

;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
;; Corfu commands are hidden, since they are not supposed to be used via M-x.
(setq read-extended-command-predicate
      #'command-completion-default-include-p)

;; Enable indentation+completion using the TAB key.
;; completion-at-point is often bound to M-TAB.
(setq tab-always-indent 'complete)

;; Completion in source blocks
(require 'cape)

(add-to-list 'completion-at-point-functions 'cape-symbol)
#+end_src

** Orderless

Allow completion based on space-separated tokens, out of order.

#+begin_src emacs-lisp

(require 'orderless)
  
(setq completion-styles '(substring orderless basic)
      orderless-component-separator 'orderless-escapable-split-on-space
      read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      completion-ignore-case t)

#+end_src 

** Benchmark

#+begin_src emacs-lisp

(my/report-time "Completion")

#+end_src

* Minibuffer & Modeline

#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src

** COMMENT Consult :BINDING:

We replace some of emacs functions with their consult equivalent

#+begin_src emacs-lisp

(require 'consult)

(setq consult-preview-key nil) ; No live preview

(bind-key "C-x C-r" #'consult-recent-file)
(bind-key "C-x h"   #'consult-outline)
(bind-key "C-x b"   #'consult-buffer)
(bind-key "C-c h"   #'consult-history)
;; (bind-key "M-:"     #'consult-complex-command)

#+end_src

For the [[help:consult-goto-line][consult-goto-line]] and ~consult-line~ commands, we define our owns with live preview (independently of the [[help:consult-preview-key][consult-preview-key]])

#+name: my/consult-line
#+begin_src emacs-lisp

(defun my/consult-line ()
  "Consult line with live preview"
  
  (interactive)
  (let ((consult-preview-key 'any)
        (mini-frame-resize 'grow-only)) ;; !! Important
    (consult-line)))

(bind-key "C-s"   #'my/consult-line)

#+end_src
#+name: my/consult-goto-line
#+begin_src emacs-lisp

(defun my/consult-goto-line ()
  "Consult goto line with live preview"
  
  (interactive)
  (let ((consult-preview-key 'any))
    (consult-goto-line)))

(bind-key "M-g g"   #'my/consult-goto-line)
(bind-key "M-g M-g" #'my/consult-goto-line)

#+end_src

** Vertico :ADVICE:HOOK:BINDING:MODE:FACE:

[[https://github.com/minad/vertico][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system but aims to be highly flexible, extensible and modular.

#+begin_src emacs-lisp

(require 'vertico)

;; (setq completion-styles '(basic substring partial-completion flex))

(setq vertico-resize nil        ; How to resize the Vertico minibuffer window.
      vertico-count 8           ; Maximal number of candidates to show.
      vertico-count-format nil) ; No prefix with number of entries

(vertico-mode)

#+end_src

Tweaking settings

#+begin_src emacs-lisp

(setq vertico-grid-separator
      #("  |  " 2 3 (display (space :width (1))
                             face (:background "#ECEFF1")))

      vertico-group-format
      (concat #(" " 0 1 (face vertico-group-title))
              #(" " 0 1 (face vertico-group-separator))
              #(" %s " 0 4 (face vertico-group-title))
              #(" " 0 1 (face vertico-group-separator
                          display (space :align-to (- right (-1 . right-margin) (- +1)))))))

(set-face-attribute 'vertico-group-separator nil
                    :strike-through t)
(set-face-attribute 'vertico-current nil
                    :inherit '(nano-strong nano-subtle))
(set-face-attribute 'completions-first-difference nil
                    :inherit '(nano-default))

#+end_src

Bind =shift-tab= for completion

#+begin_src emacs-lisp

(bind-key "<backtab>" #'minibuffer-complete vertico-map)

#+end_src

Completion-at-point and completion-in-region (see
https://github.com/minad/vertico#completion-at-point-and-completion-in-region)

#+begin_src emacs-lisp

(setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args)))

#+end_src

Prefix the current candidate
(See https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow)

#+begin_src emacs-lisp

(defun minibuffer-format-candidate (orig cand prefix suffix index _start)
  (let ((prefix (if (= vertico--index index)
                    "  "
                  "   "))) 
    (funcall orig cand prefix suffix index _start)))

(advice-add #'vertico--format-candidate
           :around #'minibuffer-format-candidate)

#+end_src

See https://kristofferbalintona.me/posts/vertico-marginalia-all-the-icons-completion-and-orderless/#vertico

#+begin_src emacs-lisp

(defun vertico--prompt-selection ()
  "Highlight the prompt"

  (let ((inhibit-modification-hooks t))
    (set-text-properties (minibuffer-prompt-end) (point-max)
                         '(face (nano-strong nano-salient)))))

#+end_src

See https://github.com/minad/vertico/issues/145

#+begin_src emacs-lisp
 
(defun minibuffer-vertico-setup ()

  (setq truncate-lines t)
  (setq completion-in-region-function
        (if vertico-mode
            #'consult-completion-in-region
          #'completion--in-region)))

(add-hook 'vertico-mode-hook #'minibuffer-vertico-setup)
(add-hook 'minibuffer-setup-hook #'minibuffer-vertico-setup)

#+end_src
** Marginalia :MODE:

Pretty straightforward.

#+begin_src emacs-lisp

(require 'marginalia)

(setq-default marginalia--ellipsis "…"    ; Nicer ellipsis
              marginalia-align 'right     ; right alignment
              marginalia-align-offset -1) ; one space on the right

(marginalia-mode)

#+end_src
** Modeline :HOOK:MODE:FACE:

We're using [[https://github.com/rougier/nano-modeline][nano-modeline]] and modify some settings here.

#+begin_src emacs-lisp
(require 'nano-theme)
(require 'nano-modeline)

(setq nano-modeline-prefix 'status)
(setq nano-modeline-prefix-padding 1)

(set-face-attribute 'header-line nil)
(set-face-attribute 'mode-line nil
                    :foreground (face-foreground 'nano-subtle-i)
                    :background (face-foreground 'nano-subtle-i)
                    :inherit nil
                    :box nil)
(set-face-attribute 'mode-line-inactive nil
                    :foreground (face-foreground 'nano-subtle-i)
                    :background (face-foreground 'nano-subtle-i)
                    :inherit nil
                    :box nil)

(set-face-attribute 'nano-modeline-active nil
                    :underline (face-foreground 'nano-default-i)
                    :background (face-background 'nano-subtle)
                    :inherit '(nano-default-)
                    :box nil)
(set-face-attribute 'nano-modeline-inactive nil
                    :foreground 'unspecified
                    :underline (face-foreground 'nano-default-i)
                    :background (face-background 'nano-subtle)
                    :box nil)

(set-face-attribute 'nano-modeline-active-name nil
                    :foreground "white"
                    :inherit '(nano-modeline-active nano-strong))
(set-face-attribute 'nano-modeline-active-primary nil
                    :inherit '(nano-modeline-active))
(set-face-attribute 'nano-modeline-active-secondary nil
                    :inherit '(nano-faded nano-modeline-active))

;; (set-face-attribute 'nano-modeline-active-status-RW nil
;;                     :inherit '(nano-faded-i nano-strong nano-modeline-active))
;; (set-face-attribute 'nano-modeline-active-status-** nil
;;                     :inherit '(nano-popout-i nano-strong nano-modeline-active))
;; (set-face-attribute 'nano-modeline-active-status-RO nil
;;                     :inherit '(nano-default-i nano-strong nano-modeline-active))

(set-face-attribute 'nano-modeline-inactive-name nil
                    :inherit '(nano-faded nano-strong
                               nano-modeline-inactive))
(set-face-attribute 'nano-modeline-inactive-primary nil
                    :inherit '(nano-faded nano-modeline-inactive))

(set-face-attribute 'nano-modeline-inactive-secondary nil
                    :inherit '(nano-faded nano-modeline-inactive))
(set-face-attribute 'nano-modeline-inactive-status-RW nil
                    :inherit '(nano-modeline-inactive-secondary))
(set-face-attribute 'nano-modeline-inactive-status-** nil
                    :inherit '(nano-modeline-inactive-secondary))
(set-face-attribute 'nano-modeline-inactive-status-RO nil
                    :inherit '(nano-modeline-inactive-secondary))

#+end_src

We set a thin modeline

#+begin_src emacs-lisp

(defun my/thin-modeline ()
  "Transform the modeline in a thin faded line"
  
  (nano-modeline-face-clear 'mode-line)
  (nano-modeline-face-clear 'mode-line-inactive)
  (setq mode-line-format (list ""))
  (setq-default mode-line-format (list ""))
  (set-face-attribute 'mode-line nil
                      :box nil
                      :inherit nil
                      :foreground (face-background 'nano-subtle)
                      :background (face-background 'nano-subtle)
                      :height 0.1)
  (set-face-attribute 'mode-line-inactive nil
                      :box nil
                      :inherit nil
                      :foreground (face-background 'nano-subtle)
                      :background (face-background 'nano-subtle)
                      :height 0.1))

(add-hook 'nano-modeline-mode-hook #'my/thin-modeline)

#+end_src

We start the nano modeline.
#+begin_src emacs-lisp

(nano-modeline-mode 1)

#+end_src

** COMMENT Minibuffer :MODE:HOOK:

Headerline (fake) for minibuffer

#+begin_src emacs-lisp
(require 'minibuffer-header)

(setq minibuffer-header-show-message t
      minibuffer-header-hide-prompt t
      minibuffer-header-default-message "")

(set-face-attribute 'minibuffer-header-face nil
                    :inherit 'nano-subtle
                    :extend t)
(set-face-attribute 'minibuffer-header-message-face nil
                    :inherit '(nano-subtle nano-faded)
                    :extend t)
#+end_src

This should be an advice but it is simpler to rewrite the function

#+begin_src emacs-lisp

(defun my/minibuffer-header-format (prompt)
  "Minibuffer header"
  
  (let* ((prompt (replace-regexp-in-string "[: \t]*$" "" prompt))
         (depth (minibuffer-depth))
         (prompt (cond ((string= prompt "M-x") "Extended command")
                       ((string= prompt "Function") "Help on function")
                       ((string= prompt "Callable") "Help on function or macro")
                       ((string= prompt "Variable") "Help on variable")
                       ((string= prompt "Command") "Help on command")
                       ((string= prompt "Eval") "Evaluate lisp expression")
                       (t prompt))))
    (concat
     (propertize (format " %d " depth)
                 'face `(:inherit (nano-salient-i nano-strong)
                         :extend t))
     (propertize " "
                 'face 'nano-subtle 'display `(raise ,nano-modeline-space-top))

     (propertize prompt
                 'face `(:inherit (nano-subtle nano-strong nano-salient)
                         :extend t))
     (propertize " "
                 'face 'nano-subtle 'display `(raise ,nano-modeline-space-bottom))
     (propertize "\n" 'face 'highlight)
     (propertize " " 'face 'highlight
                     'display `(raise ,nano-modeline-space-top))
     (propertize "︎︎" 'face '(:inherit (nano-salient nano-strong)))
     (propertize " " 'face 'highlight
                     'display `(raise ,nano-modeline-space-bottom)))))

(setq minibuffer-header-format #'my/minibuffer-header-format)

#+end_src

Activate minibuffer header

#+begin_src emacs-lisp

(minibuffer-header-mode)

#+end_src

Some styling setting for the minibuffer

#+begin_src emacs-lisp

(defun my/minibuffer-setup ()

  (set-window-margins nil 0 0)
  (set-fringe-style '(0 . 0))
  (cursor-intangible-mode t)
  (face-remap-add-relative 'default :inherit 'highlight))

(add-hook 'minibuffer-setup-hook #'my/minibuffer-setup)

#+end_src

Showing key binding for the current command

#+begin_src emacs-lisp

;; Code from https://stackoverflow.com/questions/965263
(defun my/lookup-function (keymap func)
  (let ((all-bindings (where-is-internal (if (symbolp func)
                                             func
                                           (cl-first func))
                                         keymap))
        keys key-bindings)
    (dolist (binding all-bindings)
      (when (and (vectorp binding)
                 (integerp (aref binding 0)))
        (push binding key-bindings)))
    (push (mapconcat #'key-description key-bindings " or ") keys)
    (car keys)))


(defun my/minibuffer-show-last-command-setup ()
  (setq minibuffer-header-default-message
   (my/lookup-function (current-global-map) this-command)))

(add-hook 'minibuffer-setup-hook #'my/minibuffer-show-last-command-setup)

(defun my/minibuffer-show-last-command-exit ()
  (setq minibuffer-header-default-message ""))
(add-hook 'minibuffer-exit-hook #'my/minibuffer-show-last-command-exit)

#+end_src



Vertico will disable truncate lines when point is too far on the right. Problem is that it'll mess up with our fake headerline. We thus rewrite here the function to have truncate lines always on.

#+begin_src emacs-lisp

(defun my/vertico--resize-window (height)
  "Resize active minibuffer window to HEIGHT."
;;  (setq-local truncate-lines (< (point) (* 0.8 (vertico--window-width)))
    (setq-local truncate-lines t
                resize-mini-windows 'grow-only
                max-mini-window-height 1.0)
  (unless (frame-root-window-p (active-minibuffer-window))
    (unless vertico-resize
      (setq height (max height vertico-count)))
    (let* ((window-resize-pixelwise t)
           (dp (- (max (cdr (window-text-pixel-size))
                       (* (default-line-height) (1+ height)))
                  (window-pixel-height))))
      (when (or (and (> dp 0) (/= height 0))
                (and (< dp 0) (eq vertico-resize t)))
        (window-resize nil dp nil nil 'pixelwise)))))

(advice-add #'vertico--resize-window :override #'my/vertico--resize-window)

#+end_src

No prompt editing and recursive minibuffer

#+begin_src emacs-lisp

(setq minibuffer-prompt-properties '(read-only t
                                     cursor-intangible t
                                     face minibuffer-prompt)
      enable-recursive-minibuffers t)

#+end_src

** COMMENT Miniframe :MODE:FACE:BUGFIX:

#+begin_src emacs-lisp

(require 'mini-frame)

(defcustom my/minibuffer-position 'bottom
  "Minibuffer position, one of 'top or 'bottom"
  :type '(choice (const :tag "Top"    top)
                 (const :tag "Bottom" bottom))
  :group 'nano-minibuffer)


(defun my/minibuffer--frame-parameters ()
  "Compute minibuffer frame size and position."

  ;; Quite precise computation to align the minibuffer and the
  ;; modeline when they are both at top position
  (let* ((edges (window-pixel-edges)) ;; (left top right bottom)
         (body-edges (window-body-pixel-edges)) ;; (left top right bottom)
         (left (nth 0 edges)) ;; Take margins into account
         (top (nth 1 edges)) ;; Drop header line
         (right (nth 2 edges)) ;; Take margins into account
         (bottom (nth 3 body-edges)) ;; Drop header line
         (left (if (eq left-fringe-width 0)
                   left
                 (- left (frame-parameter nil 'left-fringe))))
         (right (nth 2 edges))
         (right (if (eq right-fringe-width 0)
                    right
                  (+ right (frame-parameter nil 'right-fringe))))
         (border 1)
         (width (- right left (* 1 border)))

         ;; Window divider mode
         (width (- width (if (and (bound-and-true-p window-divider-mode)
                                  (or (eq window-divider-default-places 'right-only)
                                      (eq window-divider-default-places t))
                                  (window-in-direction 'right (selected-window)))
                             window-divider-default-right-width
                           0)))
         (y (- top border)))

    (append `((left-fringe . 0)
              (right-fringe . 0)
              (user-position . t) 
              (foreground-color . ,(face-foreground 'highlight nil 'default))
              (background-color . ,(face-background 'highlight nil 'default)))
            (cond ((and (eq my/minibuffer-position 'bottom))
                   `((top . -1)
                     (left . 0)
                     (width . 1.0)
                     (child-frame-border-width . 0)
                     (internal-border-width . 0)))
                  (t
                   `((left . ,(- left border))
                     (top . ,y)

                     (width . (text-pixels . ,width))
                     (child-frame-border-width . ,border)
                     (internal-border-width . 0)))))))

  (set-face-background 'child-frame-border (face-foreground 'nano-faded))
  (setq mini-frame-default-height 3)
  (setq mini-frame-create-lazy t)
  (setq mini-frame-show-parameters 'my/minibuffer--frame-parameters)
  (setq mini-frame-ignore-commands
        '("edebug-eval-expression" debugger-eval-expression))
  (setq mini-frame-internal-border-color (face-foreground 'nano-faded))

  (setq mini-frame-resize-min-height 3)
  (setq mini-frame-resize t)
  ;; (setq mini-frame-resize 'grow-only)
  ;; (setq mini-frame-default-height (+ 1 vertico-count))
  ;; (setq mini-frame-resize-height (+ 1 vertico-count))
  ;; (setq mini-frame-resize nil)

#+end_src

Mini-frame mode OFF

#+begin_src emacs-lisp

;; (mini-frame-mode 1)

#+end_src


More a hack than a fix but the code below improve the mini-frame resize by
setting position explicity. CURRENTLY INACTIVE

#+begin_src emacs-lisp

(defun my/mini-frame--resize-mini-frame (frame)
  "Resize FRAME vertically only.
This function used as value for `resize-mini-frames' variable."
  (funcall mini-frame--fit-frame-function
           frame
           mini-frame-resize-max-height
           (if (eq mini-frame-resize 'grow-only)
               (max (frame-parameter frame 'height)
                    mini-frame-resize-min-height)
             mini-frame-resize-min-height)
           ;; A max-width must be included to work around a bug in Emacs which
           ;; causes wrapping to not be taken into account in some situations
           ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=56102
           (window-body-width)
           nil
           'vertically)

  (if (eq my/minibuffer-position 'top)
      (modify-frame-parameters  mini-frame-completions-frame `((top . 0)))
    (modify-frame-parameters  mini-frame-completions-frame `((top . (- 1))))))

#+end_src

** Benchmark

#+begin_src emacs-lisp

(my/report-time "Minibuffer/Modeline")

#+end_src

* TODO Note Taking
** Org roam 
Global configuratoin
#+begin_src emacs-lisp
  (setq org-roam-directory (file-truename "/home/zakaria/dox/braindump/org-files"))
  (org-roam-db-autosync-mode)                    ; autosync for db
  (setq org-roam-dailies-directory (file-truename "/home/zakaria/org/daily")) ; directory for my dailies
  (setq org-roam-db-gc-threshold most-positive-fixnum) ; Garbage collection

#+end_src

Keybindings
#+begin_src emacs-lisp
(bind-key "C-c n f" #'org-roam-node-find)
(bind-key "C-c n l" #'org-roam-buffer-toggle)
(bind-key "C-c n g" #'org-roam-ui-mode)
(bind-key "C-c n i" #'org-roam-node-insert)
(bind-key "C-c n t" #'org-roam-tag-add)
(bind-key "C-c n r" #'org-roam-ref-add)
(bind-key "C-c n c" #'org-roam-capture)
(bind-key "C-c n j" #'org-roam-dailies-capture-today)
(bind-key "C-c n d" #'org-roam-dailies-map)
;; (require 'org-roam-protocol))
#+end_src

Configuring the Org-roam buffer display

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.45)
               (window-height . fit-window-to-buffer)))
#+end_src
*** org roam templates
#+begin_src emacs-lisp
  ;; org-roam templates
  (setq org-roam-capture-templates
        '(("m" "main" plain
           "%?"
           :if-new
           (file+head "main/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("r" "reference" plain "%?\n* References :ignore:\n#+print_bibliography"
           :if-new
           (file+head "refs/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("c" "comp-sci" plain "%?"
           :if-new
           (file+head "cs/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n#+filetags: :computer-science:\n")
           :immediate-finish t
           :unnarrowed t)
          ("a" "article" plain "%?"
           :if-new
           (file+head "articles/%<%Y%m%d%H%M%S>-${slug}.org"
                      "#+title: ${title}\n#+filetags: :article:\n")
           :immediate-finish t
           :unnarrowed t)))

  (setq org-roam-node-display-template
        (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag)))
#+end_src
*** Find node template 
#+begin_src emacs-lisp
(cl-defmethod org-roam-node-directories ((node org-roam-node))
  (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (format "%s" (car (split-string dirs "/")))
    ""))

(cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
  (let* ((count (caar (org-roam-db-query
                       [:select (funcall count source)
                                :from links
                                :where (= dest $s1)
                                :and (= type "id")]
                       (org-roam-node-id node)))))
    (format "[%d]" count)))


(setq org-roam-node-display-template
      (concat "${directories:10} ${title:*} ${backlinkscount:6}" (propertize "${tags:20}" 'face 'org-tag) ))
#+end_src

** org-roam-ui
#+begin_src emacs-lisp
(setq org-roam-ui-sync-theme nil
      org-roam-ui-follow t
      org-roam-ui-update-on-save t
      org-roam-ui-open-on-start t)
#+end_src
** Deft
- The Deft interface can slow down quickly when the number of files get huge.
- ~Notdeft~ is a fork of Deft that uses an external search engine and indexer.
  #+BEGIN_SRC emacs-lisp
    ;; disable linum-mode (line number)
    (add-hook 'deft
              '(lambda () (linum-mode nil)))
    (use-package deft
      :commands (deft)
      :custom       (deft-directory "~/org/notes" )
      (deft-recursive t)
      (deft-extensions '("org" "md" "txt") )
      (deft-use-filename-as-title t)
      (deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase))
        deft-org-mode-title-prefix t
        deft-text-mode 'org-mode))
    
    
  #+END_SRC
** org noter
#+begin_src emacs-lisp
(require 'org-noter)
(bind-key "C-c n n" 'org-noter-insert-note)
(bind-key "C-c n N" 'org-noter-insert-precise-note)

(setq org-noter-auto-save-last-location t
      org-noter-doc-split-fraction (quote (0.7 . 0.7))
      org-noter-notes-window-behavior nil
      org-noter-notes-window-location "Vertical"
      org-noter-always-create-frame nil
      org-noter-separate-notes-from-heading t)
#+end_src
* ORG
#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src
** General
#+begin_src emacs-lisp
(setq-default org-directory "~/org"
              org-ellipsis " …"              ; Nicer ellipsis
              org-tags-column 1              ; Tags next to header title
              org-hide-emphasis-markers t    ; Hide markers
              org-cycle-separator-lines 2    ; Number of empty lines between sections
              org-use-tag-inheritance nil    ; Tags ARE NOT inherited 
              org-use-property-inheritance t ; Properties ARE inherited
              org-indent-indentation-per-level 2 ; Indentation per level
              org-link-use-indirect-buffer-for-internals t ; Indirect buffer for internal links
              org-fontify-quote-and-verse-blocks t ; Specific face for quote and verse blocks
              org-return-follows-link nil    ; Follow links when hitting return
              org-image-actual-width nil     ; Resize image to window width
              org-indirect-buffer-display 'other-window ; Tab on a task expand it in a new window
              org-outline-path-complete-in-steps nil ; No steps in path display
              org-log-into-drawer t)         ; Log into drawers
#+end_src
Better latex preview (see https://stackoverflow.com/questions/30151338)
#+begin_src emacs-lisp
  (setq org-latex-create-formula-image-program 'dvisvgm)
#+end_src
Use points "•" for items instead of "-"
#+begin_src emacs-lisp
  (setq org-ellipsis " ⤵")
  ;; use '•' instead of '-' in lists
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 ()
                                  (compose-region
                                   (match-beginning 1)
                                   (match-end 1) "•"))))))
#+end_src
** Faces
Set up TODO keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "CANCELED")))

#+end_src

Set up TODO keyword faces

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "brown2" :weight bold)) ; brown foreground color, bold
        ("READ" . (:foreground "brown2" :weight bold)) ; brown foreground color, bold
        
        ("NEXT" . (:foreground "#00b0d1"  :weight bold )) ; blue-green foreground color, bold
        ("READING" . (:foreground "#00b0d1"  :weight bold )) ; blue-green foreground color, bold
        
        ("DONE" . (:foreground "#16a637" :weight bold)) ; green foreground color, bold
        
        ("HOLD" . (:foreground "orange"  :weight bold)) ; orange foreground color, bold
        
        ("CANCELED" . (:foreground "gray" :background "red1" :weight bold)) ; gray foreground color, red background color, bold
        ))
#+end_src

** Org capture
#+begin_src emacs-lisp
(setq org-capture-templates
      `(
        ;; Inbox entry
        ("i" " inbox" entry (file "~/org/gtd/inbox.org")
         ,(concat "* TODO %?\n"
                  "/Entered on/ %U"))

        ;; Post entry
        ("p" " post" entry (file "~/org/posts.org")
         ,(concat "* TODO %?\n"
                  "/Entered on/ %U"))

        ;; Link entry
        ("L" " link" entry (file+headline "~/org/gtd/inbox.org" "Links")
         ,(concat "* TODO %a %?\n"
                  "/Entered on/ %U") :immediate-finish t)

        ;; Slipbox entry
        ("s" " slipbox" entry (file "~/dox/braindump/org-files/fleetnotes.org")
         "* %<%a, %d %b %y (%H:%M)> : %?\n")
        ))
#+end_src

** Enhancing Org-mode Configuration with helpful related packages

Org protocol
Required for org-protocol functionality
#+begin_src emacs-lisp

(require 'org-protocol)

#+end_src

Org-appear
Show hidden emphasis markers when moving across the word
#+begin_src emacs-lisp
(setq org-appear-autolinks t
      org-appear-autosubmarkers t)
(add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

Org-cliplink
Insert org-mode links from clipboard
#+begin_src emacs-lisp
(require 'org-cliplink)
#+end_src

** Babel settings
#+begin_src emacs-lisp
(setq-default org-src-fontify-natively t         ; Fontify code in code blocks
              org-adapt-indentation nil          ; Adaptive indentation
              org-src-tab-acts-natively t        ; Tab acts as in source editing
              org-confirm-babel-evaluate nil     ; No confirmation before executing code
              org-edit-src-content-indentation 0 ; No relative indentation for code blocks
              org-fontify-whole-block-delimiter-line t) ; Fontify whole block

;; Add languages to babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (shell . t)
   (emacs-lisp . t)
   (R . t)
   ))

#+end_src
** Benchmark
#+begin_src emacs-lisp

(my/report-time "Org")

#+end_src

* Agenda
** Global

Keybinding for Agenda(s)
#+begin_src emacs-lisp
(defun zk/switch-to-agenda ()
  (interactive)
  (org-agenda nil "g"))

(bind-key "C-c a" #'zk/switch-to-agenda)
(bind-key "C-c w" #'org-agenda-week-view)
#+end_src

Use evil mode with org-agenda (with evil-org-agenda)
#+begin_src emacs-lisp
(require 'evil-org)
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+end_src

Files
#+begin_src emacs-lisp
(setq org-agenda-directory "~/org/gtd/"
      org-agenda-files '("~/org/gtd")) ;; org-agenda-files
#+end_src

Settings

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks nil ;; Do not dim blocked tasks
      org-agenda-span 'day ;; Show one day
      org-agenda-inhibit-startup t ;; Stop preparing agenda buffers on startup
      org-agenda-use-tag-inheritance nil ;; Disable tag inheritance for agendas
      org-agenda-show-log t
      org-agenda-skip-scheduled-if-deadline-is-shown t ;; Skip scheduled if already shown as a deadline
      org-agenda-deadline-leaders '("!D!: " "D%2d: " "")
      org-agenda-scheduled-leaders '("" "S%3d: ")
      org-agenda-start-on-weekday 0 ;; Weekday start on Sunday
      org-treat-S-cursor-todo-selection-as-state-change nil ;; S-R, S-L skip note/log info when fixing state
      org-log-done 'time
      org-agenda-tags-column -130 ;; Set tags far to the right
      org-clock-out-remove-zero-time-clocks t ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
      org-clock-persist t ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      org-use-fast-todo-selection t ;; from any todo state to any other state; using it keys
      org-agenda-window-setup 'only-window) ;; Always open my agenda in fullscreen

#+end_src
Keybiding for Agenda(s)

Define org's states
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

#+end_src
Add a hook to log when a task is activated by creating an "ACTIVATED" property
the first time the task enters the NEXT state (Thanks to Erik Anderson)
#+begin_src emacs-lisp
(defun log-todo-next-creation-date (&rest ignore)
  "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
  (when (and (string= (org-get-todo-state) "NEXT")
             (not (org-entry-get nil "ACTIVATED")))
    (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
#+end_src

Add hooks
#+begin_src emacs-lisp
(add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
(add-hook 'org-agenda-mode-hook
          (lambda() (display-line-numbers-mode -1))) ;; Disable line numbers in org-agenda view

#+end_src

Prefix config
#+begin_src emacs-lisp
(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-12t %s")
        (todo   . " ")
        (tags   . " %i %-12:c")
        (search . " %i %-12:c")))
#+end_src

Time grid and current time string
#+begin_src emacs-lisp
(setq org-agenda-time-grid
      '((daily today require-timed)
        ()
        "......" "----------------"))
(setq org-agenda-current-time-string "   now")

#+end_src

Sorting strategy
#+begin_src emacs-lisp
(setq org-agenda-sorting-strategy
      '((agenda habit-down time-up scheduled-down
                priority-down category-keep deadline-down)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep)))
#+end_src

** Daily Agenda
#+begin_src emacs-lisp
(setq org-agenda-block-separator ?\u2500) ;; use 'straight line' as a block-agenda divider

(setq org-agenda-custom-commands
      '(("g" "Get Things Done (GTD)"
         ((agenda ""
                  ((org-agenda-span 'day)
                   (org-deadline-warning-days 365)))

          (todo "NEXT"
                ((org-agenda-overriding-header "In Progress")
                 (org-agenda-prefix-format "  %i %-12:c [%e] ")
                 (org-agenda-files '("~/org/gtd/someday.org"
                                     "~/org/gtd/projects.org"
                                     "~/org/gtd/next.org"))))

          (todo "TODO"
                ((org-agenda-overriding-header "Inbox")
                 (org-agenda-files '("~/org/gtd/inbox.org"))))

          ;; Uncomment the following sections if needed
          ;; (todo "TODO"
          ;;       ((org-agenda-overriding-header "Emails")
          ;;        (org-agenda-files '("~/org/gtd/emails.org"))))

          ;; (todo "TODO"
          ;;       ((org-agenda-overriding-header "Projects")
          ;;        (org-agenda-files '("~/org/gtd/projects.org"))))

          (todo "TODO"
                ((org-agenda-overriding-header "One-off Tasks")
                 (org-agenda-files '("~/org/gtd/next.org"))
                 (org-agenda-skip-function '(org-agenda-skip-entry-if
                                             'deadline 'scheduled))))
          nil))))
#+end_src

NEXT and HOLD exchange for clocking out and clocking in
#+begin_src emacs-lisp
;; Clocking-out changes NEXT to HOLD
;; Clocking-in changes HOLD to NEXT
;; Original code: https://github.com/gjstein/emacs.d/blob/master/config/gs-org.el

(setq org-clock-in-switch-to-state 'zk/clock-in-to-next)
(setq org-clock-out-switch-to-state 'zk/clock-out-to-hold)

(defun zk/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
   Skips capture tasks, projects, and subprojects.
   Switch projects and subprojects from NEXT back to TODO."
  (unless (and (boundp 'org-capture-mode) org-capture-mode)
    (when (member (org-get-todo-state) '("TODO" "HOLD"))
      "NEXT")))

(defun zk/clock-out-to-hold (kw)
  "Switch a task from NEXT to HOLD when clocking out."
  (unless (and (boundp 'org-capture-mode) org-capture-mode)
    (when (member (org-get-todo-state) '("NEXT"))
      "HOLD")))
#+end_src
** Habit
    #+begin_src emacs-lisp
      (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq org-habit-graph-column 48)
      (setq org-habit-show-habits-only-for-today t)
    #+end_src
** Refiling
    #+begin_src emacs-lisp
    ;; Specify refile target using the file path
    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil)

    ;; Confirm creating parent nodes
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    ;; Define refile targets
    (setq org-refile-targets '(( "~/org/gtd/next.org" :level . 0) ; Next actions
                               ("~/org/ideas.org" :level . 1) ; Ideas
                               ("~/org/links.org" :level . 1) ; Links
                               ("~/org/gtd/someday.org" :regexp . "\\(?:\\(?:Task\\|idea\\|p\\(?:\\(?:os\\|rojec\\)t\\)\\)s\\)") ; Someday/Maybe
                               ("projects.org" :regexp . "\\(?:Tasks\\)"))) ; Projects
    #+end_src
** Processing Agenda Items
#+begin_src emacs-lisp
(defun zk/org-agenda-process-inbox-item ()
  (interactive)
  "Process a single item in the org-agenda."
  (org-with-wide-buffer
   (org-agenda-schedule t)
   (org-agenda-set-tags)
   (org-agenda-priority)
   (org-agenda-refile nil nil t)))
#+end_src
Set keybinding for the function
#+begin_src emacs-lisp

(global-set-key (kbd "C-c o") 'zk/org-agenda-process-inbox-item)

#+end_src

* Blog

#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src
This function helps me execute shell commands
#+begin_src emacs-lisp
(defun execute-shell-command (command)
  "Execute a shell command and print the output."
  (interactive "sShell command: ")
  (shell-command-to-string command))
#+end_src
Start a local server for my blog
#+begin_src emacs-lisp
(defun zk/start-local-server ()
  "Start the local web server for the blog."
  (interactive)
  (setq httpd-root "/home/zakaria/dox/blog/public/")
    (httpd-start)
    (message "Check out your blog on `localhost:8080`"))
#+end_src
** Create Blog post
Functions for my blog writing workflow

- Prompt user for blog title

#+begin_src emacs-lisp
(defun zk/prompt_for_blog_title()
  (read-string " Name of the Post: ")
  )
#+end_src

- Generate the blog org file
  
#+begin_src emacs-lisp
(defun zk/generate-blog-file ()
  "Create a new blog post. Prompts for the post name, generates a filename based on the date and post name, and inserts a template for the post."
  (interactive)
  (let* ((blog-post-title (read-string " Blog post title: "))          ; Prompt for the title of the blog post
         (blog-date-prefix (format-time-string "%Y-%m-%d"))             ; Get the current date in the format YYYY-MM-DD
         (blog-extension ".org")                                        ; Set the file extension as ".org"
         (blog-path "/home/zakaria/dox/blog/content/")                  ; Specify the directory where the blog files are stored
         (blog-filename (concat blog-path blog-date-prefix "-" (replace-regexp-in-string " " "-" (downcase blog-post-title)) blog-extension))
                                        ; Generate the filename based on the date and post title
         (blog-author "Zakaria.K")                                      ; Set the author name for the blog
         (blog-email "4.kebairia@gmail.com")                            ; Set the email for the blog
         (blog-html-options "html5-fancy:t tex:t")                      ; Set options for better HTML rendering
         (blog-org-startup-options "show2levels indent hidestars")      ; Set options for better Org mode rendering
         (blog-post-date (format-time-string "%d %B %Y"))               ; Format the current date for the blog post
         (blog-begin-date "#+begin_date\nDate: {{{date}}}")             ; Define the beginning tag for the date
         (blog-end-date "#+end_date\n"))                                ; Define the ending tag for the date

    ;; Create the file
    (if (file-exists-p blog-filename)
        (message (format "File '%s' already exists" blog-post-title))
      (with-current-buffer (find-file blog-filename)                    ; Open the file and switch to its buffer
        (insert
         (format
          "#+TITLE: %s
#+SUBTITLE:
#+AUTHOR: %s
#+EMAIL: %s
#+DATE: %s
#+OPTIONS: %s
#+STARTUP: %s
#+KEYWORDS:

"
          (capitalize blog-post-title)  
          blog-author                                                   
          blog-email                                                    
          blog-post-date                                                
          blog-html-options                                             
          blog-org-startup-options))))))
#+end_src
#+begin_src emacs-lisp
(defun zk/create-post ()
  (interactive)
  (progn
    (zk/generate-blog-file)
    (zk/start-local-server)))
#+end_src
#+end_src

** Menu for blogging
I use a simple transient menu for my blogging activities
First we need to load transient
#+begin_src emacs-lisp

(require 'transient)

#+end_src

#+begin_src emacs-lisp
(transient-define-prefix zk/blogging ()
  "Menu for my blogging activities"
  [["Blog post options"
    ("p" "Create a new post" zk/create-post)]
   ["Local blog server"
    ("s" "Start local blog" zk/start-local-server)]]
  )

;; Bind the transient menu to the key "C-c p"
(global-set-key (kbd "C-c p") 'zk/blogging)
#+end_src

** Benchmark
#+begin_src emacs-lisp

(my/report-time "Blog")

#+end_src

* Versioning  

#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src

** Magit
Bind the =C-c g= key to the =magit= command

#+begin_src emacs-lisp
(bind-key "C-c g" #'magit)
#+end_src

Disable the diff buffer when committing changes
If you need to view the diff buffer after committing, use =C-c C-d=.

#+begin_src emacs-lisp
(setq magit-commit-show-diff nil)
#+end_src

** Benchmark
#+begin_src emacs-lisp

(my/report-time "Versioning")

#+end_src

* IDE

#+begin_src emacs-lisp

(setq my/section-start-time (current-time))

#+end_src

Load eglot
#+begin_src emacs-lisp

(require 'eglot)

#+end_src

Define a function to enable line numbers and set fixed width

#+begin_src emacs-lisp
(defun my-display-line-numbers-hook ()
  (display-line-numbers-mode 1)
  (setq display-line-numbers-width-start 1))
#+end_src

Add hooks for display-line-numbers-mode.
For a more general solution, we will use the =prog-mode-hook= and =text-mode-hook=, which cover most programming and text modes.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'my-display-line-numbers-hook)
(add-hook 'text-mode-hook 'my-display-line-numbers-hook)
#+end_src

Define a function to ensure eglot is started for each mode.

#+begin_src emacs-lisp
(defun my-eglot-hook ()
  (eglot-ensure))

#+end_src

Add hooks for eglot

#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'my-eglot-hook)
(add-hook 'sh-script-mode-hook 'my-eglot-hook)
;; (add-hook 'yaml-mode-hook 'my-eglot-hook)
(add-hook 'markdown-mode-hook 'my-eglot-hook)
#+end_src

#+begin_src emacs-lisp
;; Python server
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               `(python-mode . ("pylsp" "-v" "--tcp" "--host"
                                "localhost" "--port" :autoport))))

;; Bash server
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               `(sh-mode . ("bash-language-server" "start"))))

;; YAML server
;; (with-eval-after-load 'eglot
;;   (add-to-list 'eglot-server-programs
;;                `(yaml-mode . ("yaml-language-server" "--stdio"))))

;; Markdown server
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               '(markdown-mode . ("marksman"))))

#+end_src

** Benchmark
#+begin_src emacs-lisp

(my/report-time "IDE")

#+end_src

* Profiling



** Final report
#+begin_src emacs-lisp
(let ((init-time (float-time (time-subtract (current-time) my/init-start-time)))
      (total-time (string-to-number (emacs-init-time "%f"))))

  (message "---------------------------------------------------------------")
  (message "Initialization time:                 %.2fs (+ %.2f system time)"
           init-time (- total-time init-time)))
  (message "---------------------------------------------------------------")
#+end_src
