#+TITLE: My Emacs's Configuration
#+AUTHOR: Kebairia Zakaria
#+STARTUP: overview
#+PROPERTY: header-args :results none
#+ARCHIVE: ~/org/config_archive.org::

* BOOTSTRAP
  :Properties:
  :header-args: :tangle ~/.config/emacs/init.el
  :header-args: :results none
  :END:
   #+begin_src emacs-lisp
     ;;; package --- SummarY
     ;; Load configuration from ~/.config/emacs/settings.org

     ;;; Commentary:
     ;; Added by Package.el.  This must come before configurations of
     ;; installed packages.  Don't delete this line.  If you don't want it,
     ;; just comment it out by adding a semicolon to the start of the line.
     ;; You may delete these explanatory comments.
     (require 'package)
     (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

     (package-initialize)

     (defconst user-init-dir
       (cond ((boundp 'user-emacs-directory)
              user-emacs-directory)
             ((boundp 'user-init-directory)
              user-init-directory)
             (t "~/.config/emacs")))

     (defun load-user-file (file)
       (interactive "f")
       "Load a file in current user's configuration directory"
       (load-file (expand-file-name file user-init-dir)))

     ;;(load-user-file "DEFAULTS.el")
     (load-user-file "modules/KEYBIDING.el")
     (load-user-file "modules/PACKAGES.el")
     (load-user-file "nano/nano.el")
     (load-user-file "nano/nano-base-colors.el")
     (load-user-file "nano/nano-faces.el")
     (load-user-file "nano/nano-theme-dark.el")
     (load-user-file "nano/nano-theme.el")

     ;; (load-user-file "clean-theme/clean.el")
     ;; (load-user-file "clean-theme/defaults.el")
     (load-user-file "modules/ORG.el")

   #+end_src
** Hist, Backup and auto-save
    check it here: [[https://github.com/bradwright/emacs.d]]
   #+BEGIN_SRC emacs-lisp
     ;; Hist, Backup and auto-save ..etc
     (setq backup-directory-alist '(("." . "~/.config/emacs/backup"))
       backup-by-copying t                       ; Don't delink hardlinks
       version-control t                         ; Use version numbers on backups
       delete-old-versions t                     ; Automatically delete excess backups
       kept-new-versions 3                       ; how many of the newest versions to keep
       kept-old-versions 3                       ; and how many of the old
       vc-make-backup-files t                    ; Even version controlled files get to be backed up.
       )
     (setq auto-save-file-name-transforms
           '((".*" "~/.config/emacs/undo/" t)))
     (setq undo-tree-history-directory-alist     ; Saving persistent tree-undo to a single directory
           '(("." . "~/.config/emacs/undo")))

      (setq is-work nil)                         ; *--=~~ search for explanations ~~=--*
      ;; t means no truncation
      (setq history-length t)
      (setq history-delete-duplicates t)

      (savehist-mode 1)                           ; Saves your minibuffer histories
      (setq
          savehist-file "~/.config/emacs/savehist")    ; Set the savehist file
      (setq savehist-save-minibuffer-history 1)
      (setq savehist-additional-variables         ; Save other histories and other variables as well
          '(kill-ring
            search-ring
            regexp-search-ring))
   #+END_SRC
    #+end_src

* KEYMAPS
  :PROPERTIES:
  :header-args: :tangle ~/.config/emacs/modules/KEYBIDING.el
  :header-args: :results none
  :END:
** Files
   #+begin_src emacs-lisp
     ;; some shortcuts -- files
     (global-set-key (kbd "C-c C") (lambda() (interactive)(find-file "~/.config/emacs/init.org")))
     (global-set-key (kbd "C-c b") (lambda() (interactive)(find-file "~/org/books.org")))
     (global-set-key (kbd "C-c I") (lambda() (interactive)(find-file "~/org/gtd/inbox.org")))
     ;;(global-set-key (kbd "C-c L") (lambda() (interactive)(find-file "~/org/links.org")))
     ;;(global-set-key (kbd "C-c E") (lambda() (interactive)(find-file "~/org/gtd/emails.org")))
     (global-set-key (kbd "<f12>") (lambda() (interactive)(find-file "~/org/files/org.pdf")))
     ;; Reload buffer with <F5>
     (global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
   #+end_src

** win-movements
   #+begin_src emacs-lisp
       (defun zk/split-go-right()
         (interactive)
         (split-window-horizontally)
         (windmove-right))
       (defun zk/split-go-down()
         (interactive)
         (split-window-vertically)
         (windmove-down))
        ;; try to go to the other window automaticly
        (global-set-key (kbd "C-x i") 'zk/split-go-right)
        (global-set-key (kbd "C-x m") 'zk/split-go-down)

        ;; Move between buffer
        (global-set-key (kbd "M-n") 'switch-to-next-buffer)
        (global-set-key (kbd "M-p") 'switch-to-prev-buffer)

        ;; Move between Windows
        (global-set-key (kbd "C-x k") 'windmove-up)
        (global-set-key (kbd "C-x j") 'windmove-down)
        (global-set-key (kbd "C-x l") 'windmove-right)
        (global-set-key (kbd "C-x h") 'windmove-left)

        ;; Resize windows
        (global-set-key (kbd "C-M-l") 'shrink-window-horizontally)
        (global-set-key (kbd "C-M-h") 'enlarge-window-horizontally)
        (global-set-key (kbd "C-M-j") 'shrink-window)
        (global-set-key (kbd "C-M-k") 'enlarge-window)

        (global-set-key (kbd "M-o") 'delete-other-windows)
        (global-set-key (kbd "C-x p") 'zk/org-agenda-process-inbox-item)
   #+end_src
* PACKAGES
  :PROPERTIES:
  :header-args: :tangle ~/.config/emacs/modules/PACKAGES.el
  :header-args: :results none
  :END:
** COMMENT Theme
   #+BEGIN_SRC emacs-lisp
     (use-package gruvbox-theme
      :init )
      ;; the bellow is used so that emacs will trust the elisp code[the theme]
      ;; in future
     (custom-set-variables
      '(custom-enabled-themes  '(gruvbox-dark-hard))
      '(custom-safe-themes
         '("4cf9ed30ea575fb0ca3cff6ef34b1b87192965245776afa9e9e20c17d115f3fb"
            default)))
   #+END_SRC
** evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)                   ;; this statement is required to enable evil/evil-colleciton mode
  (evil-mode 1)                                     ;; enable evil-mode
  (setq evil-want-abbrev-expand-on-insert-exit nil)
  (use-package evil-collection                      ;; evil-friendly binding for many modes
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  ;; (use-package evil-magit
  ;;   :after evil)
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  (setq                                             ;;automatically use evil for ibuffer and dired
   evil-emacs-state-modes
      (delq 'ibuffer-mode evil-emacs-state-modes))
#+END_SRC
** evil-leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
     ;; needs to be enabled before M-x evil-mode!
         :ensure t
         :config
             (evil-leader/set-leader ",")
             (evil-leader/set-key
              "a" 'zk/switch-to-agenda
              "w" 'org-agenda-week-view
              "m" 'org-agenda-month-view
              ;; "d" 'deft
              ;; "I" 'zetteldeft-insert-list-links
              ;; "N" 'zetteldeft-new-file-and-link
              ;; "B" 'zetteldeft-new-file-and-backlink
              ;; "f" 'pdf-links-action-perform
              ;; "b" 'ibuffer
              ;; "t" 'term
              "c" 'org-capture
              ;; "g" 'magit-status
              "r" 'bookmark-bmenu-list
              "l" 'org-store-link
              "L" 'org-insert-link
              ;; "n" 'org-noter
              "q" 'kill-current-buffer)
             (evil-leader-mode 1)
             (global-evil-leader-mode 1))
              ;;"B" 'zetteldeft-backlink-add
              ;;"s" 'zk/gen-scratch-buffer
   #+END_SRC


** Minions
   #+BEGIN_SRC emacs-lisp
     ;;Use minions to hide all minor modes
     (use-package minions
       :config
       (setq minions-mode-line-lighter ""
             minions-mode-line-delimiters '("" . ""))
       (minions-mode 1))
   #+END_SRC
** Ibuffer
   #+BEGIN_SRC emacs-lisp
     ;; disable linum-mode
     (add-hook 'ibuffer-mode (lambda() (linum-mode -1)))
     (global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
     ;; create a function that define a group
     (setq ibuffer-saved-filter-groups
         '(("default"
            ("Emacs"  (or
                        (name . "^\\*Messages\\*$")
                        (name . "^\\*scratch\\*$")
            ))
            ("Agenda"  (or
                        (name . "inbox.org")
                        (name . "next.org")
                        (name . "someday.org")
                        (name . "emails.org")
                        (name . "archive.org")
                        (name . "habits.org")
                        (name . "projects.org")
                        (name . "weekly_reviews.org")
                ))

            ("Org"  (name . "^.*org$"))
            ("PDF"  (name . "^.*pdf"))
            ("Python"  (name . "^.*py$"))
            ("Elisp"  (name . "^.*el"))
            ("Web"  (or
                        (name . "^.*html$")
                        (name . "^.*css")
                        (name . "^.*php")
                ))
            ("Dired"  (mode . dired-mode))
          ))
       )

     (add-hook 'ibuffer-mode-hook
      '(lambda ()
         (ibuffer-auto-mode 1)
         (ibuffer-switch-to-saved-filter-groups "default"))) ;; use the group default

   #+END_SRC
** which-key
    Which-key Package show me a helpful menu when i press "C-x" and wait
#+BEGIN_SRC emacs-lisp
   (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
  ;; it looks like counsel is a requirement for swiper
  ;; counsel give us a nice looking interface when we use M-x
  (use-package counsel
    :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x o") 'ace-window)
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key "\M-S" 'counsel-org-goto)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* ORG
  :PROPERTIES:
  :header-args: :tangle ~/.config/emacs/modules/ORG.el
  :header-args: :results none
  :END:
** GTD
  #+begin_src emacs-lisp
    ;; ;; Adding a separator line between days in Emacs Org-mode calender view (prettier)

    ;;     (setq org-agenda-format-date (lambda (date) (concat "\n"
    ;;                                                         (make-string (window-width) 9472)
    ;;                                                         "\n"
    ;;                                                         (org-agenda-format-date-aligned date))))
            (setq org-agenda-directory "~/org/gtd/"
                  org-agenda-files '("~/org/gtd" ))                 ;; org-agenda-files

             (setq org-agenda-dim-blocked-tasks nil                ;; Do not dim blocked tasks
                   org-agenda-span 'day
                   org-agenda-inhibit-startup t              ;; Stop preparing agenda buffers on startup:
                   org-agenda-use-tag-inheritance nil              ;; Disable tag inheritance for agendas:
                   org-agenda-show-log t
                   org-agenda-skip-scheduled-if-done t
                   org-agenda-skip-deadline-if-done t
                   org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled

                   org-agenda-time-grid
                   '((daily today require-timed)
                    (800 1000 1200 1400 1600 1800 2000)
                    "......" "----------------"))
            (setq
                org-agenda-start-on-weekday 0                       ;; Weekday start on Sunday
                 org-treat-S-cursor-todo-selection-as-state-change nil;; S-R,S-L skip the note/log info[used when fixing the state]
                  org-agenda-tags-column -100                     ;; Set tags far to the right
                  org-clock-out-remove-zero-time-clocks t         ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
                  org-clock-persist t                             ;; Save the running clock and all clock history when exiting Emacs, load it on startup
                  org-use-fast-todo-selection t                   ;; from any todo state to any other state; using it keys
                 org-agenda-window-setup 'only-window)              ;; Always open my agenda in fullscreen
            (setq org-agenda-prefix-format
              '((agenda . " %i %-12:c%?-12t% s")
                (todo   . " ")
                (tags   . " %i %-12:c")
                (search . " %i %-12:c")))

            (setq org-todo-keywords
              '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)")))

            (defun log-todo-next-creation-date (&rest ignore)
              "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
              (when (and (string= (org-get-todo-state) "NEXT")
                         (not (org-entry-get nil "ACTIVATED")))
                (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))

            (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
            (add-hook 'org-agenda-mode-hook                        ;; disable line-number when i open org-agenda view
                       (lambda() (display-line-numbers-mode -1)))

            ;; (define-key global-map (kbd "C-c c") 'org-capture)
            ;; (define-key global-map (kbd "C-c a") 'org-agenda)
  #+end_src

  #+RESULTS:
  | lambda | nil | (display-line-numbers-mode -1) |

*** org agenda
    #+begin_src emacs-lisp

            (setq org-agenda-block-separator  9472)     ; use 'straight line' as a block-agenda divider
            (setq org-agenda-custom-commands
                  '(("g" "Get Things Done (GTD)"
                     ((agenda ""
                            ((org-agenda-overriding-header "Tasks")
                             (org-agenda-prefix-format "  %i %-12:c [%e] ")
                             (org-agenda-use-time-grid t)

                               (org-deadline-warning-days 0)
                               (org-agenda-skip-function
                                '(org-agenda-skip-entry-if 'deadline))
                                     ))

                      (agenda nil
                              ((org-agenda-overriding-header "Deadlines")
                               (org-agenda-entry-types '(:deadline))
                               (org-agenda-format-date "")
                               (org-deadline-warning-days 7)
                               (org-agenda-prefix-format "  %?-12t% s")
                               (org-agenda-skip-function
                                '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))))

                      (todo "TODO"
                                 ((org-agenda-overriding-header "Inbox")
                                  (org-agenda-files '("~/org/gtd/inbox.org"))
                                  (org-agenda-prefix-format "  %?-12t% s")))
                      (todo "DONE"
                            ((org-agenda-overriding-header "Completed today")
                          (org-agenda-files
                            '("~/org/gtd/projects.org" "~/org/gtd/inbox.org" "~/org/gtd/next.org" "~/org/gtd/habits.org"))
                             (org-agenda-prefix-format "  %?-12t% s")))

                        ))))
                      ;; (tags "CLOSED>=\"<today>\""
                      ;;       ((org-agenda-overriding-header "Completed today")
                      ;;        (org-agenda-prefix-format "  %?-12t% s")
    #+end_src

*** Habit
    #+BEGIN_SRC emacs-lisp
      (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq org-habit-graph-column 48)
      (setq org-habit-show-habits-only-for-today t)
    #+END_SRC

*** refiling
    #+begin_src emacs-lisp
      ;; Refiling [need reading]
      (setq org-refile-use-outline-path 'file
       org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-refile-targets '(("~/org/gtd/next.org" :level . 0)
                                 ("~/org/links.org" :level . 1)
                                 ("~/org/ideas.org" :level . 1)
                                 ("someday.org" :level . 0)
                                 ("~/org/gtd/projects.org" :maxlevel . 2)))
    #+end_src
** org capture
   #+begin_src emacs-lisp
     (setq org-capture-templates
        `(("i" "Inbox" entry  (file "~/org/gtd/inbox.org")
         ,(concat "* TODO %?\n"
                  "/Entered on/ %U"))))
   #+end_src
** Other Functions
   #+BEGIN_SRC emacs-lisp
     (defun zk/switch-to-agenda ()
          (interactive)
          (org-agenda nil "g"))
     ;; PS: check out the original code from here:
     ;; https://github.com/gjstein/emacs.d/blob/master/config/gs-org.el

     ;;clocking-out changes NEXT to HOLD
     ;;clocking-in changes HOLD to NEXT
     (setq org-clock-in-switch-to-state 'zk/clock-in-to-next)
     (setq org-clock-out-switch-to-state 'zk/clock-out-to-hold)
     (defun zk/clock-in-to-next (kw)
       "Switch a task from TODO to NEXT when clocking in.
        Skips capture tasks, projects, and subprojects.
        Switch projects and subprojects from NEXT back to TODO"
       (when (not (and (boundp 'org-capture-mode) org-capture-mode))
         (cond
          ((and (member (org-get-todo-state) (list "TODO")))
           "NEXT")
          ((and (member (org-get-todo-state) (list "HOLD")))
           "NEXT")
           )))
     (defun zk/clock-out-to-hold (kw)
       (when (not (and (boundp 'org-capture-mode) org-capture-mode))
         (cond
          ((and (member (org-get-todo-state) (list "NEXT")))  "HOLD")
           )))

   #+END_SRC

** todo faces
   #+begin_src emacs-lisp
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "CANCELED")))
    (setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "brown2" :weight bold))
        ("READ" . (:foreground "brown2" :weight bold))

        ("NEXT" . (:foreground "#00b0d1"  :weight bold ))
        ("READING" . (:foreground "#00b0d1"  :weight bold ))

        ("DONE" . (:foreground "#16a637" :weight bold))

        ("HOLD" . (:foreground "orange"  :weight bold))

        ("CANCELED" . (:foreground "gray" :background "red1" :weight bold))
      ))
   #+end_src

** org-exports
*** Latex
 #+begin_src emacs-lisp
   (add-to-list 'org-latex-classes
                    '("elsarticle"
                      "\\documentclass{elsarticle}
    [NO-DEFAULT-PACKAGES]
    [PACKAGES]
    [EXTRA]"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
   (add-to-list 'org-latex-classes
                    '("mimosis"
                      "\\documentclass{mimosis}
    [NO-DEFAULT-PACKAGES]
    [PACKAGES]
    [EXTRA]
   \\newcommand{\\mboxparagraph}[1]{\\paragraph{#1}\\mbox{}\\\\}
   \\newcommand{\\mboxsubparagraph}[1]{\\subparagraph{#1}\\mbox{}\\\\}"
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\mboxparagraph{%s}" . "\\mboxparagraph*{%s}")
                      ("\\mboxsubparagraph{%s}" . "\\mboxsubparagraph*{%s}")))

   (add-to-list 'org-latex-classes
                '( "koma-article"
                   "\\documentclass{scrartcl}"
                   ( "\\section{%s}" . "\\section*{%s}" )
                   ( "\\subsection{%s}" . "\\subsection*{%s}" )
                   ( "\\subsubsection{%s}" . "\\subsubsection*{%s}" )
                   ( "\\paragraph{%s}" . "\\paragraph*{%s}" )
                   ( "\\subparagraph{%s}" . "\\subparagraph*{%s}" )))
   ;; Coloured LaTeX using Minted
   (setq org-latex-listings 'minted
       org-latex-packages-alist '(("" "minted"))
       org-latex-pdf-process
       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "biber %b"
         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
   ;; syntex-highlighting
   (use-package htmlize)
   ;;Don’t include a footer...etc in exported HTML document.
   (setq org-html-postamble nil)
   (setq org-src-window-setup 'current-window)

   (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
   (add-hook 'org-mode-hook 'org-display-inline-images)
 #+end_src

 #+RESULTS:
 | org-display-inline-images | evil-org-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Reveal-js
   #+begin_src emacs-lisp
     (use-package ox-reveal
       :ensure ox-reveal
       )
     (setq org-reveal-root "file:///home/zakaria/org/files/conf/revealJS/reveal.js-4.1.0")
     (setq org-reveal-mathjax t)
   #+end_src
** Babel
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "org"
       (use-package ob-async
         :ensure t
         :init (require 'ob-async)))
     (setq org-confirm-babel-evaluate nil
           org-src-fontify-natively t
           org-confirm-babel-evaluate nil
           org-src-tab-acts-natively t)
             (org-babel-do-load-languages
             'org-babel-load-languages
             '((python . t)
               (shell . t)
               (emacs-lisp . t)
               (R . t)
               ))
   #+END_SRC

