# ------------------------------------------------------------------------------
#+TITLE:     My Emacs's Configuration
#+SUBTITLE:  Kebairia Zakaria - January 2021
#+AUTHOR:    Kebairia Zakaria
#+EMAIL:     4.kebairia@gmail.com
#+LANGUAGE:  en
#+STARTUP:   content showstars indent inlineimages hideblocks
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/zakaria/org/conf/rouger.css" />
#+OPTIONS:   toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil
#+PROPERTY:  header-args :results none
#+ARCHIVE: ~/org/config_archive.org::
# ------------------------------------------------------------------------------
- automatically tangle our ~init.org~ config file when we save it
#+begin_src emacs-lisp
  (defun zk/org-babel-tangle-config()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/init.org"))
      ;; dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
      (add-hook 'org-mode-hook (lambda ()(add-hook 'after-save-hook #'zk/org-babel-tangle-config))) 
#+end_src
* BOOTSTRAP
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el
:header-args: :results none
:END:
** DEPS
#+begin_src emacs-lisp
  ;;; package --- Summary  
  ;; Load configuration from ~/.config/emacs/modules/*.el

                ;;; Commentary:
  ;; Added by Package.el.  This must come before configurations of
  ;; installed packages.  Don't delete this line.  If you don't want it,
  ;; just comment it out by adding a semicolon to the start of the line.
  ;; You may delete these explanatory comments.

#+end_src
- ~gc-cons-threshold~ is the number of bytes of consing before a garbage collection is invoked.
  It's normally set at 800,000 bytes, but for me that invokes the GC 39 times!!! during startup ~(gcs-done)~ ,
  and the GC is sloooow. I've set it to ~384M above.
  And now no GC invocations during startup.
  source:  [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][2 easy little known steps to speed up Emacs start up time]]
- reset the ~gc-cons-threshold~ to its defaults values after startup
*** Faster Startup 
#+begin_src emacs-lisp
  ;; Speed up startup
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold 800000
                     gc-cons-percentage 0.1)
               (garbage-collect)) t)
#+end_src
*** Load files and initialize packages repositories
#+begin_src emacs-lisp
  ;; package managers
  (require 'package)
  ;;(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  ;; emacs 27 now does'nt need a package-initialize
  (when (< emacs-major-version 27)
    (package-initialize))
  ;; load files
  (load "~/.config/emacs/modules/DEFAULTS.el") 
  (load "~/.config/emacs/modules/PACKAGES.el") 
  (load "~/.config/emacs/modules/SESSIONS.el") 
  (load "~/.config/emacs/modules/BINDINGS.el") 
  (load "~/.config/emacs/modules/ORG.el") 
  (load "~/.config/emacs/modules/MU4E.el") 
  (load "~/.config/emacs/nano/nano.el") 
  (load "~/.config/emacs/nano/nano-layout.el") 
  (load "~/.config/emacs/nano/nano-modeline.el") 
#+end_src
*** Mesure emacs startup time
#+begin_src emacs-lisp
  ;; Measure emacs startup time
  (add-to-list 'after-init-hook
               (lambda ()
                 (message (concat "emacs ("
                                  (number-to-string (emacs-pid))
                                  ") started in "
                                  (emacs-init-time)))))
#+end_src
** DEFAULTS
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/modules/DEFAULTS.el
:header-args: :results none
:END:
#+begin_src emacs-lisp
  ;; User name
  (setq user-full-name "Kebairia Zakaria")
  ;; User mail address
  (setq user-mail-address "4.kebairia@gmail.com")
  ;; No startup  screen
  (setq inhibit-startup-screen t)
  ;; No startup message
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)
  ;; No message in scratch buffer
  (setq initial-scratch-message nil)
  ;; Initial buffer 
  (setq initial-buffer-choice nil)
  ;; No frame title
  (setq frame-title-format nil)
  ;; No file fialog
  (setq use-file-dialog nil)
  ;; No dialog box
  (setq use-dialog-box nil)
  ;; No popup windows
  (setq pop-up-windows nil)
  ;; No empty line indicators
  (setq indicate-empty-lines nil)
  ;; No cursor in inactive windows
  (setq cursor-in-non-selected-windows nil)
  ;; fundamental mode is initial mode
  ;;(setq initial-major-mode 'fundamental-mode)
  ;; Text mode is default major mode
  ;;(setq default-major-mode 'text-mode)
  ;; Moderate font lock
  (setq font-lock-maximum-decoration nil)
  ;; No limite on font lock
  (setq font-lock-maximum-size nil)

  ;; No line breat space points
  (setq auto-fill-mode nil)

  ;; Fill column at 80
  (setq fill-column 80)

  ;; No confirmation for visiting non-existent files
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; Completion style, see
  ;; gnu.org/software/emacs/manual/html_node/emacs/Completion-Styles.html
  (setq completion-styles '(basic substring))

  ;; Mouse active in terminal
  (unless (display-graphic-p)
    (xterm-mouse-mode 1)
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
  ;; modeline at top
  (setq-default header-line-format mode-line-format)
  ;; No scroll bars
  (scroll-bar-mode 0)
  ;; No toolbar
  (tool-bar-mode 0)
  ;; No menu bar
  (menu-bar-mode -1)
  ;; (if (display-graphic-p)
  ;;     (menu-bar-mode t) ;; When nil, focus problem on OSX
  ;;   (menu-bar-mode -1))
  ;; Navigate windows using shift+direction
  (windmove-default-keybindings)
  ;; Paren mode
  (show-paren-mode 1)
  ;; Electric pair mode
  (electric-pair-mode 1)
  ;; Tab behavior
  (setq tab-always-indent 'complete)
  (global-company-mode)
  (define-key company-mode-map [remap indent-for-tab-command]
    #'company-indent-or-complete-common)
  ;; Pixel scroll (as opposed to char scrool)
  (pixel-scroll-mode t)
  ;; Mac specific
  ;; (setq ns-use-native-fullscreen t
  ;;       mac-option-key-is-meta nil
  ;;       mac-command-key-is-meta t
  ;;       mac-command-modifier 'meta
  ;;       mac-option-modifier nil
  ;;       mac-use-title-bar nil)

  ;; Make sure clipboard works properly in tty mode on OSX
                                          ;(defun copy-from-osx ()
                                          ;(shell-command-to-string "pbpaste"))
                                          ;(defun paste-to-osx (text &optional push)
                                          ;(let ((process-connection-type nil))
                                          ;(let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
                                          ;(process-send-string proc text)
                                          ;(process-send-eof proc))))
                                          ;(if (not (display-graphic-p))
                                          ;(progn (setq interprogram-cut-function 'paste-to-osx)
                                          ;(setq interprogram-paste-function 'copy-from-osx)))

  ;; y/n for  answering yes/no questions
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; use ssh by default in tramp
  (setq tramp-default-method "ssh")

  ;; No tabs
  ;;(setq-default indent-tabs-mode nil)

  ;; Tab.space equivalence
  (setq tab-width 4)

  ;; Size of temporary buffers
  (temp-buffer-resize-mode)
  (setq temp-buffer-max-height 8)

  ;; Minimum window height
  (setq window-min-height 1)

  ;; Buffer encoding
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment   'utf-8)

  ;; Unique buffer names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " • "
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*")

  ;; Default shell in term
  (setq-default shell-file-name "/bin/zsh")
  (setq explicit-shell-file-name "/bin/zsh")
  ;; activate eterm-256color-mode when starting term
  (add-hook 'term-mode-hook #'eterm-256color-mode)

  ;; Kill term buffer when exiting
  (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
    (if (memq (process-status proc) '(signal exit))
        (let ((buffer (process-buffer proc)))
          ad-do-it
          (kill-buffer buffer))
      ad-do-it))
  (ad-activate 'term-sentinel)

  ;; display line number in text/prog & fundamental modes
  (setq-default
   display-line-numbers-current-absolute t ;  Enable the line nubmers
   display-line-numbers-width 2
   display-line-numbers-widen t)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'fundamental-mode-hook #'display-line-numbers-mode)
#+end_src
** BACKUPS/SESSIONS ..etc
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/modules/SESSIONS.el
:header-args: :results none
:END:
#+begin_src emacs-lisp
  ;; Save miscellaneous history
  (setq savehist-additional-variables
        '(kill-ring
          command-history
          set-variable-value-history
          custom-variable-history   
          query-replace-history     
          read-expression-history   
          minibuffer-history        
          read-char-history         
          face-name-history         
          bookmark-history          
          ivy-history               
          counsel-M-x-history       
          file-name-history         
          counsel-minibuffer-history))
  (setq history-length 250)
  (setq kill-ring-max 25)
  (put 'minibuffer-history         'history-length 50)
  (put 'file-name-history          'history-length 50)
  (put 'set-variable-value-history 'history-length 25)
  (put 'custom-variable-history    'history-length 25)
  (put 'query-replace-history      'history-length 25)
  (put 'read-expression-history    'history-length 25)
  (put 'read-char-history          'history-length 25)
  (put 'face-name-history          'history-length 25)
  (put 'bookmark-history           'history-length 25)
  (put 'ivy-history                'history-length 25)
  (put 'counsel-M-x-history        'history-length 25)
  (put 'counsel-minibuffer-history 'history-length 25)
  (setq savehist-file "~/.local/share/emacs/savehist")
  (savehist-mode 1)

  ;; Remove text properties for kill ring entries
  ;; See https://emacs.stackexchange.com/questions/4187
  (defun unpropertize-kill-ring ()
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))
  (add-hook 'kill-emacs-hook 'unpropertize-kill-ring)

  ;; Recentf files 
  (setq recentf-max-menu-items 25)
  (setq recentf-save-file     "~/.local/share/emacs/recentf")
  (recentf-mode 1)

  ;; Bookmarks
  (setq bookmark-default-file "~/.local/share/emacs/bookmark")
  ;; Undo file
  (setq auto-save-file-name-transforms
        '((".*" "~/.local/share/emacs/undo/" t)))
  ;; Saving persistent tree-undo to a single directory
  (setq undo-tree-history-directory-alist     
        '(("." . "~/.local/share/emacs/undo-tree")))
  ;; Backup
  (setq backup-directory-alist '(("." . "~/.local/share/emacs/backups"))
        make-backup-files t     ; backup of a file the first time it is saved.
        backup-by-copying t     ; don't clobber symlinks
        version-control t       ; version numbers for backup files
        delete-old-versions t   ; delete excess backup files silently
        kept-old-versions 6     ; oldest versions to keep when a new numbered
                                          ;  backup is made (default: 2)
        kept-new-versions 9     ; newest versions to keep when a new numbered
                                          ;  backup is made (default: 2)
        auto-save-default t     ; auto-save every buffer that visits a file
        auto-save-timeout 20    ; number of seconds idle time before auto-save
                                          ;  (default: 30)
        auto-save-interval 200)  ; number of keystrokes between auto-saves
                                          ;  (default: 300)
  ;; Saving my sessions in another folder.
  (setq auto-save-list-file-prefix            
        "~/.local/share/emacs/sessions/session-")
  (setq auth-sources '("~/.local/share/emacs/authinfo"
                       "~/.local/share/emacs/authinfo.gpg"
                       "~/.authinfo"
                       "~/.authinfo.gpg"
                       "~/.netrc" ))
#+end_src

** BINDINGS              
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/modules/BINDINGS.el
:header-args: :results none
:END:
*** Files
   #+begin_src emacs-lisp
     ;; some shortcuts -- files
     (global-set-key (kbd "C-c C") (lambda() (interactive)(find-file "~/.config/emacs/init.org")))
     (global-set-key (kbd "C-c b") (lambda() (interactive)(find-file "~/org/books.org")))
     (global-set-key (kbd "C-c I") (lambda() (interactive)(find-file "~/org/gtd/inbox.org")))
     (global-set-key (kbd "C-c L") (lambda() (interactive)(find-file "~/org/links.org")))
     (global-set-key (kbd "C-c E") (lambda() (interactive)(find-file "~/org/gtd/emails.org")))
     (global-set-key (kbd "<f12>") (lambda() (interactive)(find-file "~/org/conf/org.pdf")))
     ;; Reload buffer with <F5>
     (global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
   #+end_src
*** Win-movements
   #+begin_src emacs-lisp
     (global-set-key (kbd "<f12>" ) 'flyspell-auto-correct-previous-word)
     (defun zk/split-go-right()
       (interactive)
       (split-window-horizontally)
       (windmove-right))
     (defun zk/split-go-down()
       (interactive)
       (split-window-vertically)
       (windmove-down))
     ;; try to go to the other window automaticly
     (global-set-key (kbd "C-x i") 'zk/split-go-right)
     (global-set-key (kbd "C-x m") 'zk/split-go-down)

     ;; Move between buffer
     (global-set-key (kbd "M-n") 'switch-to-next-buffer)
     (global-set-key (kbd "M-p") 'switch-to-prev-buffer)

     ;; Move between Windows
     (global-set-key (kbd "C-x k") 'windmove-up)
     (global-set-key (kbd "C-x j") 'windmove-down)
     (global-set-key (kbd "C-x l") 'windmove-right)
     (global-set-key (kbd "C-x h") 'windmove-left)

     ;; Resize windows
     (global-set-key (kbd "C-M-l") 'shrink-window-horizontally)
     (global-set-key (kbd "C-M-h") 'enlarge-window-horizontally)
     (global-set-key (kbd "C-M-j") 'shrink-window)
     (global-set-key (kbd "C-M-k") 'enlarge-window)

     (global-set-key (kbd "M-o") 'delete-other-windows)
     (global-set-key (kbd "C-x p") 'zk/org-agenda-process-inbox-item)
   #+end_src

* PACKAGES             
  :PROPERTIES:
  :header-args: :tangle ~/.config/emacs/modules/PACKAGES.el
  :header-args: :results none
  :END:
** COMMENT Dired  
#+begin_src emacs-lisp
  (use-package dired-single)
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-gho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-find-file))

#+end_src
** evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)                   ;; this statement is required to enable evil/evil-colleciton mode
  (evil-mode 1)                                     ;; enable evil-mode
  (setq evil-want-abbrev-expand-on-insert-exit nil)
  (use-package evil-collection                      ;; evil-friendly binding for many modes
    :after evil
    :ensure t
    :config
    (evil-collection-init))
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  (setq                                             ;;automatically use evil for ibuffer and dired
   evil-emacs-state-modes
      (delq 'ibuffer-mode evil-emacs-state-modes))
#+END_SRC
** evil-leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
     ;; needs to be enabled before M-x evil-mode!
         :ensure t
         :config
             (evil-leader/set-leader ",")
             (evil-leader/set-key
              "e" 'mu4e
              "a" 'zk/switch-to-agenda
              "d" 'deft
              "g" 'magit-status
              "i" 'org-roam-insert
              "I" 'org-roam-insert-immediate
              "f" 'org-roam-capture
              "l" 'org-roam
              "t" 'term
              "c" 'org-capture
              "r" 'counsel-recentf
              "b" 'bookmark-bmenu-list
              "L" 'org-insert-link
              "q" 'kill-current-buffer
              "F" 'pdf-links-action-perform
              "n" 'org-noter)
             (evil-leader-mode 1)
             (global-evil-leader-mode 1))
              ;; "b" 'ibuffer
              ;;"l" 'org-store-link
              ;; "B" 'zetteldeft-new-file-and-backlink
              ;;"B" 'zetteldeft-backlink-add
              ;;"s" 'zk/gen-scratch-buffer
   #+END_SRC
** Deft
   #+BEGIN_SRC emacs-lisp
     ;; disable linum-mode (line number)
     (add-hook 'deft
     '(lambda () (linum-mode nil)))
      (use-package deft
         :commands (deft)
         :custom       (deft-directory "~/org/notes" )
                       (deft-recursive t)
                       (deft-extensions '("org" "md" "txt") )
                       (deft-use-filename-as-title t)
                       (deft-file-naming-rules
                         '((noslash . "-")
                           (nospace . "-")
                           (case-fn . downcase))
                       deft-org-mode-title-prefix t
                       deft-text-mode 'org-mode))


   #+END_SRC
** org roam
#+begin_src emacs-lisp
  (require 'org-roam-protocol)
  (setq ivy-use-selectable-prompt t )
        (use-package org-roam
          :ensure t
          :hook
          (after-init . org-roam-mode)
          :custom
          (org-roam-directory "/home/zakaria/org/notes")
          :bind (:map org-roam-mode-map
                      (("C-c n l" . org-roam)
                       ("C-c n f" . org-roam-find-file)
                       ("C-c n d" . org-roam-dailies-capture-today)
                       ("C-c n D" . org-roam-dailies-find-today)
                       ("C-c n g" . org-roam-graph))
                      :map org-mode-map
                      (("C-c n i" . org-roam-insert))
                      (("C-c n t" . org-roam-tag-add))
                      (("C-c n I" . org-roam-insert-immediate))))
        ;; (setq org-roam-completion-system 'ivy)
        (org-roam-mode 1)
      ;; 
    (setq org-roam-dailies-directory "/home/zakaria/org/daily/")

    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             #'org-roam-capture--get-point
             "* %?"
             :file-name "/home/zakaria/org/daily/%<%Y-%m-%d>"
             :head "#+title: %<%Y-%m-%d>\n\n")))
    (winner-mode +1)
    (define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
    (define-key winner-mode-map (kbd "<M-right>") #'winner-redo)


#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit)
  ;;(use-package evil-magit
  ;;  :after magit)
  "Display BUFFER in same-window"
  (custom-set-variables
   '(magit-display-buffer-function 'magit-display-buffer-traditional))
  ;; '(magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** UndoTree
   #+BEGIN_SRC emacs-lisp
     ;;turn on everywhere
     (global-undo-tree-mode 1)
     ;; Save history to a file
     (setq
         undo-tree-auto-save-history 1 ; Show relative times in the undo tree visualizer
         undo-tree-visualizer-timestamps 1; Show diffs when browsing through the undo tree
         undo-tree-visualizer-diff 1)
   #+END_SRC
** Ibuffer
   #+BEGIN_SRC emacs-lisp
     ;; disable linum-mode
     (add-hook 'ibuffer-mode (lambda() (linum-mode -1)))
     (global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
     ;; create a function that define a group
     (setq ibuffer-saved-filter-groups
         '(("default"
            ("Emacs"  (or
                        (name . "^\\*Messages\\*$")
                        (name . "^\\*scratch\\*$")
            ))
            ("Agenda"  (or
                        (name . "inbox.org")
                        (name . "next.org")
                        (name . "someday.org")
                        (name . "emails.org")
                        (name . "archive.org")
                        (name . "habits.org")
                        (name . "projects.org")
                        (name . "weekly_reviews.org")
                ))

            ("Org"  (name . "^.*org$"))
            ("PDF"  (name . "^.*pdf"))
            ("Python"  (name . "^.*py$"))
            ("Elisp"  (name . "^.*el"))
            ("Web"  (or
                        (name . "^.*html$")
                        (name . "^.*css")
                        (name . "^.*php")
                ))
            ("Dired"  (mode . dired-mode))
          ))
       )

     (add-hook 'ibuffer-mode-hook
      '(lambda ()
         (ibuffer-auto-mode 1)
         (ibuffer-switch-to-saved-filter-groups "default"))) ;; use the group default

   #+END_SRC
** which-key
    Which-key Package show me a helpful menu when i press "C-x" and wait
#+BEGIN_SRC emacs-lisp
   (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** selectrum 
#+begin_src emacs-lisp
  (use-package selectrum
    :ensure t)
  (selectrum-mode +1)
  ;; to make sorting and filtering more intelligent
  (selectrum-prescient-mode +1)

  ;; to save your command history on disk, so the sorting gets more
  ;; intelligent over time
  (prescient-persist-mode +1)
  ;; In Emacs 27 there is also a flex style which you might like.
  (setq completion-styles '(substring partial-completion))
  (setq selectrum-show-indices t)
#+end_src
** CTRLF
#+begin_src emacs-lisp
  (use-package ctrlf
    :ensure t)
  (ctrlf-mode +1)
#+end_src
** Aggressive Indent
:PROPERTIES:
:ACTIVATED: [2021-01-16]
:END:
The variable ~aggressive-indent-dont-indent-if~ lets you customize when you don't want indentation to happen.
#+begin_example
(add-to-list
 'aggressive-indent-dont-indent-if
 '(and (derived-mode-p 'c++-mode)
       (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                           (thing-at-point 'line)))))
#+end_example
#+begin_src emacs-lisp
  (global-aggressive-indent-mode 1)
#+end_src
** PDF-Tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
     :ensure t
     :config
     (pdf-tools-install))
      ;; open pdfs scaled to fit page
     (setq-default pdf-view-display-size 'fit-page)
      ;; exchange isearch -- occur, occur -- isearch
     (define-key pdf-view-mode-map (kbd "C-s") 'occur)
     (define-key pdf-view-mode-map (kbd "M-s o") 'isearch-forward)
     ;; turn off cua so copy works
     (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
     ;; more fine-grained zooming
     (setq pdf-view-resize-factor 1.1)

     (use-package org-pdfview
     :ensure t)
     ;; Set the pdf-view incompatible-modes[linum mode: line numbers]
     (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

     ;; org noter configuration
     (use-package org-noter
      :after org
      :ensure t
      :config (setq org-noter-auto-save-last-location t
                    org-noter-doc-split-fraction (quote (0.7 . 0.7))
                    org-noter-notes-window-behavior nil
                    org-noter-always-create-frame nil
                    org-noter-separate-notes-from-heading t))
   #+END_SRC
** COMMENT Swiper
#+BEGIN_SRC emacs-lisp
  ;; it looks like counsel is a requirement for swiper
  ;; counsel give us a nice looking interface when we use M-x
  (use-package counsel
    :ensure t)
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      ;(global-set-key "\C-i" 'counsel-org-goto-all)
      (global-set-key (kbd "\C-c g") 'counsel-git)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "\C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "\C-c j") 'counsel-git-grep)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC
* ORG MODE            
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/modules/ORG.el
:header-args: :results none
:END:
** GLOBAL
#+begin_src elisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  ;; use '⤵' instead of '...' in headlines
  ;;(setq org-ellipsis "⤵")
#+end_src
** GTD
*** Global
   #+begin_src emacs-lisp
     ;; ;; Adding a separator line between days in Emacs Org-mode calender view (prettier)

     ;;     (setq org-agenda-format-date (lambda (date) (concat "\n"
     ;;                                                         (make-string (window-width) 9472)
     ;;                                                         "\n"
     ;;                                                         (org-agenda-format-date-aligned date))))
     (setq org-agenda-directory "~/org/gtd/"
           org-agenda-files '("~/org/gtd" ))                    ;; org-agenda-files

     (setq org-agenda-dim-blocked-tasks nil                    ;; Do not dim blocked tasks
           org-agenda-span 'day                                ;; show me one day
           org-agenda-inhibit-startup t                        ;; Stop preparing agenda buffers on startup:
           org-agenda-use-tag-inheritance nil                  ;; Disable tag inheritance for agendas:
           org-agenda-show-log t
           ;;org-agenda-skip-scheduled-if-done t
           ;;org-agenda-skip-deadline-if-done t
           ;;org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled
           org-agenda-skip-scheduled-if-deadline-is-shown t     ;; skip scheduled if they are already shown as a deadline
           org-agenda-deadline-leaders '("!D!: " "D%2d: " "")
           org-agenda-scheduled-leaders '("" "S%3d: ")

           org-agenda-time-grid
           '((daily today require-timed)
             (800 1000 1200 1400 1600 1800 2000)
             "......" "----------------"))
     (setq
      org-agenda-start-on-weekday 0                          ;; Weekday start on Sunday
      org-treat-S-cursor-todo-selection-as-state-change nil ;; S-R,S-L skip the note/log info[used when fixing the state]
      org-log-done 'time
      org-agenda-tags-column -130                          ;; Set tags far to the right
      org-clock-out-remove-zero-time-clocks t              ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
      org-clock-persist t                                  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
      org-use-fast-todo-selection t                        ;; from any todo state to any other state; using it keys
      org-agenda-window-setup 'only-window)                 ;; Always open my agenda in fullscreen

     (setq org-agenda-prefix-format
           '((agenda . " %i %-12:c%?-12t %s")
             (todo   . " ")
             (tags   . " %i %-12:c")
             (search . " %i %-12:c")))
     ;; define org's states
     (setq org-todo-keywords
           '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
             (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
     ;; sort my org-agenda preview
     (setq org-agenda-sorting-strategy '((agenda habit-down
                                                 time-up
                                                 scheduled-down
                                                 priority-down
                                                 category-keep
                                                 deadline-down)
                                         (todo priority-down category-keep)
                                         (tags priority-down category-keep)
                                         (search category-keep)))

     ;;Thanks to Erik Anderson, we can also add a hook that will log when we activate
     ;;a task by creating an “ACTIVATED” property the first time the task enters the NEXT state:
     (defun log-todo-next-creation-date (&rest ignore)
       "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
       (when (and (string= (org-get-todo-state) "NEXT")
                  (not (org-entry-get nil "ACTIVATED")))
         (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))

     (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)
     (add-hook 'org-agenda-mode-hook                            ;; disable line-number when i open org-agenda view
                (lambda() (display-line-numbers-mode -1)))

     ;; (define-key global-map (kbd "C-c c") 'org-capture)
     ;; (define-key global-map (kbd "C-c a") 'org-agenda)
  #+end_src
*** ORG AGENDA
    #+begin_src emacs-lisp
      (setq org-agenda-block-separator  9472)                  ;; use 'straight line' as a block-agenda divider
      (setq org-agenda-custom-commands
            '(("g" "Get Things Done (GTD)"
               ((agenda ""
                        ((org-agenda-span 'day)
                         (org-deadline-warning-days 365)))

                (todo "NEXT"
                      ((org-agenda-overriding-header "In Progress")
                       (org-agenda-prefix-format "  %i %-12:c [%e] ")
                       (org-agenda-files '("~/org/gtd/someday.org"
                                           "~/org/gtd/projects.org"
                                           "~/org/gtd/next.org"))
                       ))
                (todo "TODO"
                      ((org-agenda-overriding-header "inbox")
                       (org-agenda-files '("~/org/gtd/inbox.org"))))

                (todo "TODO"
                      ((org-agenda-overriding-header "Emails")
                       (org-agenda-files '("~/org/gtd/emails.org"))))

                (todo "TODO"
                      ((org-agenda-overriding-header "Projects")
                       (org-agenda-files '("~/org/gtd/projects.org")))
                      )

                (todo "TODO"
                      ((org-agenda-overriding-header "One-off Tasks")
                       (org-agenda-files '("~/org/gtd/next.org"))
                       (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                   'deadline 'scheduled))))
                nil))))

    #+end_src
*** Habit
    #+BEGIN_SRC emacs-lisp
      (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq org-habit-graph-column 48)
      (setq org-habit-show-habits-only-for-today t)
    #+END_SRC
*** Refiling
    #+begin_src emacs-lisp
      ;; Refiling [need reading]
      ;;tell org-mode we want to specify a refile target using the file path.
      (setq org-refile-use-outline-path 'file
       org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-refile-targets '(("~/org/gtd/next.org" :level . 0)
                                 ("~/org/ideas.org" :level . 1)
                                 ("~/org/links.org" :level . 1)
                                 ("~/org/gtd/someday.org" :regexp . "\\(?:\\(?:Task\\|idea\\|p\\(?:\\(?:os\\|rojec\\)t\\)\\)s\\)")
                                 ("projects.org" :regexp . "\\(?:Tasks\\)"))) 
      ;;("someday.org" :level . 0)
    #+end_src

** org-appear
#+begin_src shell
  (use-package org-appear
   :load-path "~/.config/emacs/modules/org-appear/")
  (add-hook 'org-mode-hook 'org-appear-mode)
  (setq
   org-appear-autolinks t
   org-appear-autosubmarkers t)
#+end_src
** org capture
   #+begin_src emacs-lisp
     (setq org-capture-templates
           `(("i" "Inbox" entry  (file "~/org/gtd/inbox.org")
              ,(concat "* TODO %?\n"
                       "/Entered on/ %U"))
             ("l" "Link" entry (file+headline "~/org/gtd/inbox.org" "Links")
              ,(concat "* TODO %a %?\n"
                       "/Entered on/ %U") :immediate-finish t)
             ("e" "email" entry (file+headline "~/org/gtd/emails.org" "Emails")
              "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")

             ;; ("m" "mood" entry (file "~/org/mood.org" )
             ;;  ,(concat "* %? \n %^{MOOD} \n"
             ;;           "/Entered on/ %U") :immediate-finish t)
             ))
   #+end_src
** org protocol
#+begin_src emacs-lisp
(require 'org-protocol)
#+end_src
** org ref
#+begin_src emacs-lisp
  (setq reftex-default-bibliography '("~/org/ref/org-ref.bib"))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes "/tmp/test/notes.org"
        org-ref-default-bibliography '("~/org/ref/org-ref.bib")
        org-ref-pdf-directory "~/org/ref/pdfs")
#+end_src
** todo faces
   #+begin_src emacs-lisp
    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "CANCELED")))
    (setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "brown2" :weight bold))
        ("READ" . (:foreground "brown2" :weight bold))

        ("NEXT" . (:foreground "#00b0d1"  :weight bold ))
        ("READING" . (:foreground "#00b0d1"  :weight bold ))

        ("DONE" . (:foreground "#16a637" :weight bold))

        ("HOLD" . (:foreground "orange"  :weight bold))

        ("CANCELED" . (:foreground "gray" :background "red1" :weight bold))
      ))
   #+end_src

** COMMENT org-exports
*** Latex
 #+begin_src emacs-lisp
   (add-to-list 'org-latex-classes
                    '("elsarticle"
                      "\\documentclass{elsarticle}
    [NO-DEFAULT-PACKAGES]
    [PACKAGES]
    [EXTRA]"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
   (add-to-list 'org-latex-classes
                    '("mimosis"
                      "\\documentclass{mimosis}
    [NO-DEFAULT-PACKAGES]
    [PACKAGES]
    [EXTRA]
   \\newcommand{\\mboxparagraph}[1]{\\paragraph{#1}\\mbox{}\\\\}
   \\newcommand{\\mboxsubparagraph}[1]{\\subparagraph{#1}\\mbox{}\\\\}"
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\mboxparagraph{%s}" . "\\mboxparagraph*{%s}")
                      ("\\mboxsubparagraph{%s}" . "\\mboxsubparagraph*{%s}")))

   (add-to-list 'org-latex-classes
                '( "koma-article"
                   "\\documentclass{scrartcl}"
                   ( "\\section{%s}" . "\\section*{%s}" )
                   ( "\\subsection{%s}" . "\\subsection*{%s}" )
                   ( "\\subsubsection{%s}" . "\\subsubsection*{%s}" )
                   ( "\\paragraph{%s}" . "\\paragraph*{%s}" )
                   ( "\\subparagraph{%s}" . "\\subparagraph*{%s}" )))
   ;; Coloured LaTeX using Minted
   (setq org-latex-listings 'minted
       org-latex-packages-alist '(("" "minted"))
       org-latex-pdf-process
       '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "biber %b"
         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

   ;; syntex-highlighting
   (use-package htmlize)
   ;;Don’t include a footer...etc in exported HTML document.
   (setq org-html-postamble nil)
   (setq org-src-window-setup 'current-window)

   (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
   (add-hook 'org-mode-hook 'org-display-inline-images)
   (custom-set-variables
    ;; custom-set-variables was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    '(magit-display-buffer-function 'magit-display-buffer-traditional)
    '(org-export-backends '(ascii beamer html icalendar latex odt)))

   (custom-set-variables
    '(org-export-backends '(ascii beamer html icalendar latex odt)))
 #+end_src

** Reveal-js
   #+begin_src emacs-lisp
     (use-package ox-reveal
       :ensure ox-reveal)
     (setq org-reveal-root
           "file:///home/zakaria/org/conf/revealJS/reveal.js-4.1.0")
     (setq org-reveal-mathjax t)
   #+end_src
** Babel
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "org"
       (use-package ob-async
         :ensure t
         :init (require 'ob-async)))
     (setq org-confirm-babel-evaluate nil
           org-src-fontify-natively t
           org-confirm-babel-evaluate nil
           org-src-tab-acts-natively t)
     ;; (require 'org-tempo)
     ;; (add-to-list 'org-structure-template-alist '("s" . "src sh"))
     ;; (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     ;; (add-to-list 'org-structure-template-alist '("p" . "src python"))
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (shell . t)
        (emacs-lisp . t)
        (R . t)
        ))
   #+END_SRC
** Other Functions
   #+BEGIN_SRC emacs-lisp
     (defun zk/switch-to-agenda ()
          (interactive)
          (org-agenda nil "g"))
     ;; PS: check out the original code from here:
     ;; https://github.com/gjstein/emacs.d/blob/master/config/gs-org.el

     ;;clocking-out changes NEXT to HOLD
     ;;clocking-in changes HOLD to NEXT
     (setq org-clock-in-switch-to-state 'zk/clock-in-to-next)
     (setq org-clock-out-switch-to-state 'zk/clock-out-to-hold)
     (defun zk/clock-in-to-next (kw)
       "Switch a task from TODO to NEXT when clocking in.
        Skips capture tasks, projects, and subprojects.
        Switch projects and subprojects from NEXT back to TODO"
       (when (not (and (boundp 'org-capture-mode) org-capture-mode))
         (cond
          ((and (member (org-get-todo-state) (list "TODO")))
           "NEXT")
          ((and (member (org-get-todo-state) (list "HOLD")))
           "NEXT")
           )))
     (defun zk/clock-out-to-hold (kw)
       (when (not (and (boundp 'org-capture-mode) org-capture-mode))
         (cond
          ((and (member (org-get-todo-state) (list "NEXT")))  "HOLD")
           )))

   #+END_SRC

* PYTHON
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/modules/PYTHON.el
:header-args: :results none
:END:
** COMMENT python-mode and lsp
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-defferd)
    )

#+end_src
** Jedi
    #+BEGIN_SRC emacs-lisp
      (use-package jedi
       :ensure t
       :init
        (add-hook 'python-mode-hook 'jedi:setup)
        (add-hook 'python-mode-hook 'jedi:ac-setup)
       )
      (setq jedi:complete-on-dot t)

      ;; (add-to-list 'company-backends 'company-jedi)

      ;; (add-hook 'python-mode-hook 'jedi:setup)
      ;; (setq jedi:complete-on-dot t)
    #+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC
** Elpy
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :init
        :disabled t
        (elpy-enable))
    #+END_SRC
* COMMENT MU4E 
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/modules/MU4E.el
:header-args: :results none
:END:
** INFO
checkout [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][mu4e for Dummies]] on reddit

1. you need to create your authinfo file, ~authinfo~ is where you keep your email's password so mu4e can reach it
2. simply create a file in your ~.emacs.d/~ folder, or any other folder you want, in my case i use ~~/.local/share/emacs/~ folder
3. put your password in it using the authinfo syntax
4. we need to make this file encrypted, so that this private information ca be safely stored.
   1. use gpg : ~gpg2 --output ~~/.local/share/emacs/authinfo.gpg --symmetric ~~/.local/share/emacs/authinfo~
5. remove the old file
*** Headers Mode

Key Bindings:
|-----+-------+-------------------------------------+--------------------------------------|
| Key | Evil  | Command                             | Description                          |
|-----+-------+-------------------------------------+--------------------------------------|
|     |       | Movement                            |                                      |
|-----+-------+-------------------------------------+--------------------------------------|
| C-n | j     | next-line                           | Moves to the next header line        |
| C-p | k     | previous-line                       | Moves to the previous header line    |
| [[  | [[    | mu4e-headers-prev-unread            | Moves to previous unread message     |
| ]]  | ]]    | mu4e-headers-next-unread            | Moves to next unread message         |
| j   | J     | mu4e~headers-jump-to-maildir        | Jump to another mail directory       |
|     |       |                                     |                                      |
|-----+-------+-------------------------------------+--------------------------------------|
|     |       | Toggles                             |                                      |
|-----+-------+-------------------------------------+--------------------------------------|
| P   | zt    | mu4e-headers-toggle-threading       | Toggles threaded message display     |
| W   | zr    | mu4e-headers-toggle-include-related | Toggles related message display      |
|     |       |                                     |                                      |
|-----+-------+-------------------------------------+--------------------------------------|
|     |       | Marking                             |                                      |
|-----+-------+-------------------------------------+--------------------------------------|
| d   | d     | mu4e-headers-mark-for-trash         | Marks message for deletion           |
| m   | m     | mu4e-headers-mark-for-move          | Marks message for move to folder     |
| +   | +     | mu4e-headers-mark-for-flag          | Marks message for flagging           |
| -   | -     | mu4e-headers-mark-for-unflag        | Marks message for unflagging         |
| %   | %     | mu4e-headers-mark-pattern           | Marks based on a regex pattern       |
| u   | u     | mu4e-headers-mark-for-unmark        | Removes mark for message             |
| U   | U     | mu4e-mark-unmark-all                | Unmarks all marks in the view        |
| x   | x     | mu4e-mark-execute-all               | Executes all marks in the view       |
|-----+-------+-------------------------------------+--------------------------------------|
|     |       | Searching                           |                                      |
|-----+-------+-------------------------------------+--------------------------------------|
| s   | s     | mu4e-headers-search                 | Search all e-mails                   |
| S   | S     | mu4e-headers-search-edit            | Edit current search (useful!)        |
| /   | /     | mu4e-headers-search-narrow          | Narrow down the current results      |
| b   | b     | mu4e-headers-search-bookmark        | Select a bookmark to search with     |
| B   | B     | mu4e-headers-search-bookmark-edit   | Edit bookmark before search          |
| g   | gr    | mu4e-rerun-search                   | Rerun the current search             |
|-----+-------+-------------------------------------+--------------------------------------|
|     |       | Composing                           |                                      |
|-----+-------+-------------------------------------+--------------------------------------|
| C   | C, cc | mu4e-compose-new                    | Compose a new e-mail                 |
| R   | R, cr | mu4e-compose-reply                  | Compose a reply to selected email    |
| F   | F, cf | mu4e-compose-forward                | Compose a forward for selected email |
| E   | E, ce | mu4e-compose-edit                   | Edit selected draft message          |
|     |       |                                     |                                      |
|     |       | Other Actions                       |                                      |
| q   | q     | mu4e~headers-quit-buffer            | Quit the headers view                |
|-----+-------+-------------------------------------+--------------------------------------|

Controlling the number of messages visible:

    ~mu4e-headers-results-limit~: The number of messages to display in mail listings (default 500)
    ~mu4e-headers-full-search~: If t, shows all messages, ignoring limit

You can toggle ~mu4e-headers-full-search~ with ~M-x mu4e-headers-toggle-full-search~!

*** View Mode

Many of the same keybindings work! Marking keys work on the currently viewed message.
| Key | Evil | Command                  | Description                            |
|-----+------+--------------------------+----------------------------------------|
|     |      | Movement                 |                                        |
| C-n | j    | next-line                | Moves to the next line in message      |
| C-p | k    | previous-line            | Moves to the previous line in message  |
| n   | C-j  | mu4e-view-headers-next   | Moves to next email in header list     |
| p   | C-k  | mu4e-view-headers-prev   | Moves to previous email in header list |
| [[  | [[   | mu4e-headers-prev-unread | Moves to previous unread message       |
| ]]  | ]]   | mu4e-headers-next-unread | Moves to next unread message           |
|-----+------+--------------------------+----------------------------------------|

*** Search queries
    something - General text search for “something”
    from:stallman - Emails from a particular sender
    date:today..now - Date range
    flag:attach - Emails with an attachment
    =”maildir:/Inbox”= - Search in a specific mail directory

You can also use logic statements like and , not:

=”maildir:/Inbox” and from:eli and docs=

Documentation: https://www.djcbsoftware.nl/code/mu/mu4e/Queries.html
** CONFIG 
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :config
    ;; Pull in org helpers
    (require 'mu4e-org)
    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)
                                          ; allow fancy icons for mail threads
    ;;(setq mu4e-use-fancy-chars t) 

    ;; Refresh mail using isync every 10 minutes
    ;;(setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync --config ~/.config/isync/mbsyncrc -a"
          mu4e-compose-signature-auto-include t
          mu4e-compose-signature 
          (concat "Kebairia Zakaria\n"
                  "Github: www.github.com/kebairia\n"
                  "linkedIn: www.linkedin.com/in/zakaria-kebairia\n")
          mu4e-compose-format-flowed t) ;; Make sure plain text mails flow correctly for recipients


    (setq mu4e-maildir (expand-file-name "~/.local/share/mail"))

    (setq mu4e-contexts
          (list
           ;; ESI account
           (make-mu4e-context
            :name "esi"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/ESI" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "z.kebairia@esi-sba.dz")
                    (user-full-name    . "Kebairia Zakaria, ISI, G03")
                    (smtpmail-auth-credentials . (expand-file-name "~/.local/share/emacs/authinfo"))
                    (smtpmail-smtp-user . "z.kebairia@esi-sba.dz")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . tls)
                    (mu4e-drafts-folder  . "/z.kebairia@esi-sba.dz/[Gmail].Drafts")
                    (mu4e-sent-folder  . "/z.kebairia@esi-sba.dz/[Gmail].Sent Mail")
                    (mu4e-refile-folder  . "/z.kebairia@esi-sba.dz/[Gmail].All Mail")
                    (mu4e-trash-folder  . "/z.kebairia@esi-sba.dz/[Gmail].Trash")

                    ))
           ;; Personal account
           (make-mu4e-context
            :name "Personal"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/4.kebairia" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "4.kebairia@gmail.com")
                    (user-full-name    . "Kebairia Zakaria")
                    (smtpmail-auth-credentials . (expand-file-name "~/.local/share/emacs/authinfo"))
                    (smtpmail-smtp-user . "4.kebairia@gmail.com")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . tls)
                    (mu4e-drafts-folder  . "/4.kebairia@gmail.com/[Gmail].Drafts")
                    (mu4e-sent-folder  . "/4.kebairia@gmail.com/[Gmail].Sent")
                    (mu4e-refile-folder  . "/4.kebairia@gmail.com/[Gmail].Archive")
                    (mu4e-trash-folder  . "/4.kebairia@gmail.com/[Gmail].Trash")
                    )))))

  ;; use org-htmlize by default when sending an email
  (add-hook 'message-send-hook 'org-mime-htmlize)

  ;; Configure the function to use for sending mail
  (setq message-send-mail-function 'smtpmail-send-it)
  (use-package org-mime
  :ensure t
  :config
  (setq org-mime-export-options '(
                                  :section-numbers nil
                                  :with-author nil
                                  :with-toc nil)))

  ;; (use-package org-mu4e
  ;;   :ensure t)
  ;; spell check
  (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
              "My settings for message composition."
              (visual-line-mode)
              ;;(mu4e-org-mode)
              (use-hard-newlines -1)
              (flyspell-mode)))

  (add-hook 'mu4e-headers-mode-hook
  (defun my/mu4e-change-headers ()
    (interactive)
    (setq mu4e-headers-fields
          `((:human-date . 15) ;; alternatively, use :date
            (:flags . 6)
            (:from . 22)
            (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
            (:size . 7)))))

  ;;from the info manual
  (setq mu4e-attachment-dir  "~/dwn")

  (setq message-kill-buffer-on-exit t)
  (setq mu4e-compose-dont-reply-to-self t)

  ;; convert org mode to HTML automatically
  (setq org-mu4e-convert-to-html t)

  ;; don't ask when quitting
  (setq mu4e-confirm-quit nil)


#+end_src

